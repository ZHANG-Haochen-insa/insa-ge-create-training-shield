
insa-ge-create-training-shield.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004614  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ec  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec0  08004ec0  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ec8  08004ec8  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ecc  08004ecc  00005ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004ed0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000064  08004f34  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08004f34  000064cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3ca  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002320  00000000  00000000  00013456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd0  00000000  00000000  00015778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a9e  00000000  00000000  00016548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ecb  00000000  00000000  00016fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010939  00000000  00000000  0002beb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080418  00000000  00000000  0003c7ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcc02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  000bcc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000c02e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046bc 	.word	0x080046bc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080046bc 	.word	0x080046bc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8d8 	bl	80004a4 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8d3 	bl	80004a4 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	d434      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000306:	469b      	mov	fp, r3
 8000308:	4653      	mov	r3, sl
 800030a:	465a      	mov	r2, fp
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83b      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e079      	b.n	8000416 <__udivmoddi4+0x146>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e076      	b.n	800041c <__udivmoddi4+0x14c>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e029      	b.n	800039c <__udivmoddi4+0xcc>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	469b      	mov	fp, r3
 8000374:	2320      	movs	r3, #32
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	4652      	mov	r2, sl
 800037a:	40da      	lsrs	r2, r3
 800037c:	4641      	mov	r1, r8
 800037e:	0013      	movs	r3, r2
 8000380:	464a      	mov	r2, r9
 8000382:	408a      	lsls	r2, r1
 8000384:	0017      	movs	r7, r2
 8000386:	4642      	mov	r2, r8
 8000388:	431f      	orrs	r7, r3
 800038a:	4653      	mov	r3, sl
 800038c:	4093      	lsls	r3, r2
 800038e:	001e      	movs	r6, r3
 8000390:	42af      	cmp	r7, r5
 8000392:	d9c3      	bls.n	800031c <__udivmoddi4+0x4c>
 8000394:	2200      	movs	r2, #0
 8000396:	2300      	movs	r3, #0
 8000398:	9200      	str	r2, [sp, #0]
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	4643      	mov	r3, r8
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d0d8      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a2:	07fb      	lsls	r3, r7, #31
 80003a4:	0872      	lsrs	r2, r6, #1
 80003a6:	431a      	orrs	r2, r3
 80003a8:	4646      	mov	r6, r8
 80003aa:	087b      	lsrs	r3, r7, #1
 80003ac:	e00e      	b.n	80003cc <__udivmoddi4+0xfc>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	d101      	bne.n	80003b6 <__udivmoddi4+0xe6>
 80003b2:	42a2      	cmp	r2, r4
 80003b4:	d80c      	bhi.n	80003d0 <__udivmoddi4+0x100>
 80003b6:	1aa4      	subs	r4, r4, r2
 80003b8:	419d      	sbcs	r5, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2100      	movs	r1, #0
 80003c2:	3e01      	subs	r6, #1
 80003c4:	1824      	adds	r4, r4, r0
 80003c6:	414d      	adcs	r5, r1
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d006      	beq.n	80003da <__udivmoddi4+0x10a>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d9ee      	bls.n	80003ae <__udivmoddi4+0xde>
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1924      	adds	r4, r4, r4
 80003d4:	416d      	adcs	r5, r5
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d1f8      	bne.n	80003cc <__udivmoddi4+0xfc>
 80003da:	9800      	ldr	r0, [sp, #0]
 80003dc:	9901      	ldr	r1, [sp, #4]
 80003de:	465b      	mov	r3, fp
 80003e0:	1900      	adds	r0, r0, r4
 80003e2:	4169      	adcs	r1, r5
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db24      	blt.n	8000432 <__udivmoddi4+0x162>
 80003e8:	002b      	movs	r3, r5
 80003ea:	465a      	mov	r2, fp
 80003ec:	4644      	mov	r4, r8
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	002a      	movs	r2, r5
 80003f2:	40e2      	lsrs	r2, r4
 80003f4:	001c      	movs	r4, r3
 80003f6:	465b      	mov	r3, fp
 80003f8:	0015      	movs	r5, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	db2a      	blt.n	8000454 <__udivmoddi4+0x184>
 80003fe:	0026      	movs	r6, r4
 8000400:	409e      	lsls	r6, r3
 8000402:	0033      	movs	r3, r6
 8000404:	0026      	movs	r6, r4
 8000406:	4647      	mov	r7, r8
 8000408:	40be      	lsls	r6, r7
 800040a:	0032      	movs	r2, r6
 800040c:	1a80      	subs	r0, r0, r2
 800040e:	4199      	sbcs	r1, r3
 8000410:	9000      	str	r0, [sp, #0]
 8000412:	9101      	str	r1, [sp, #4]
 8000414:	e79e      	b.n	8000354 <__udivmoddi4+0x84>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d8bc      	bhi.n	8000394 <__udivmoddi4+0xc4>
 800041a:	e782      	b.n	8000322 <__udivmoddi4+0x52>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	2100      	movs	r1, #0
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	2200      	movs	r2, #0
 8000426:	9100      	str	r1, [sp, #0]
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	2201      	movs	r2, #1
 800042c:	40da      	lsrs	r2, r3
 800042e:	9201      	str	r2, [sp, #4]
 8000430:	e785      	b.n	800033e <__udivmoddi4+0x6e>
 8000432:	4642      	mov	r2, r8
 8000434:	2320      	movs	r3, #32
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	002a      	movs	r2, r5
 800043a:	4646      	mov	r6, r8
 800043c:	409a      	lsls	r2, r3
 800043e:	0023      	movs	r3, r4
 8000440:	40f3      	lsrs	r3, r6
 8000442:	4644      	mov	r4, r8
 8000444:	4313      	orrs	r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	40e2      	lsrs	r2, r4
 800044a:	001c      	movs	r4, r3
 800044c:	465b      	mov	r3, fp
 800044e:	0015      	movs	r5, r2
 8000450:	2b00      	cmp	r3, #0
 8000452:	dad4      	bge.n	80003fe <__udivmoddi4+0x12e>
 8000454:	4642      	mov	r2, r8
 8000456:	002f      	movs	r7, r5
 8000458:	2320      	movs	r3, #32
 800045a:	0026      	movs	r6, r4
 800045c:	4097      	lsls	r7, r2
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	40de      	lsrs	r6, r3
 8000462:	003b      	movs	r3, r7
 8000464:	4333      	orrs	r3, r6
 8000466:	e7cd      	b.n	8000404 <__udivmoddi4+0x134>

08000468 <__clzsi2>:
 8000468:	211c      	movs	r1, #28
 800046a:	2301      	movs	r3, #1
 800046c:	041b      	lsls	r3, r3, #16
 800046e:	4298      	cmp	r0, r3
 8000470:	d301      	bcc.n	8000476 <__clzsi2+0xe>
 8000472:	0c00      	lsrs	r0, r0, #16
 8000474:	3910      	subs	r1, #16
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	4298      	cmp	r0, r3
 800047a:	d301      	bcc.n	8000480 <__clzsi2+0x18>
 800047c:	0a00      	lsrs	r0, r0, #8
 800047e:	3908      	subs	r1, #8
 8000480:	091b      	lsrs	r3, r3, #4
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0x22>
 8000486:	0900      	lsrs	r0, r0, #4
 8000488:	3904      	subs	r1, #4
 800048a:	a202      	add	r2, pc, #8	@ (adr r2, 8000494 <__clzsi2+0x2c>)
 800048c:	5c10      	ldrb	r0, [r2, r0]
 800048e:	1840      	adds	r0, r0, r1
 8000490:	4770      	bx	lr
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	02020304 	.word	0x02020304
 8000498:	01010101 	.word	0x01010101
	...

080004a4 <__clzdi2>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	2900      	cmp	r1, #0
 80004a8:	d103      	bne.n	80004b2 <__clzdi2+0xe>
 80004aa:	f7ff ffdd 	bl	8000468 <__clzsi2>
 80004ae:	3020      	adds	r0, #32
 80004b0:	e002      	b.n	80004b8 <__clzdi2+0x14>
 80004b2:	0008      	movs	r0, r1
 80004b4:	f7ff ffd8 	bl	8000468 <__clzsi2>
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <Timer_Interrupt_Handler>:
  * @brief  Interrupt handler for TIM6 timer
  * @note	This function is called when the timer is reloaded
  *         It reads ADC values from potentiometer inputs and update screen infos
  */
void Timer_Interrupt_Handler(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b08d      	sub	sp, #52	@ 0x34
 80004c0:	af00      	add	r7, sp, #0
	uint32_t pot1_value = Get_ADC_Value(ADC_CHANNEL_10);
 80004c2:	4b27      	ldr	r3, [pc, #156]	@ (8000560 <Timer_Interrupt_Handler+0xa4>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 f90f 	bl	80006e8 <Get_ADC_Value>
 80004ca:	0003      	movs	r3, r0
 80004cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t pot2_value = Get_ADC_Value(ADC_CHANNEL_11);
 80004ce:	4b25      	ldr	r3, [pc, #148]	@ (8000564 <Timer_Interrupt_Handler+0xa8>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f909 	bl	80006e8 <Get_ADC_Value>
 80004d6:	0003      	movs	r3, r0
 80004d8:	62bb      	str	r3, [r7, #40]	@ 0x28
	char line1_str[20] = {0};
 80004da:	2414      	movs	r4, #20
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	0018      	movs	r0, r3
 80004e0:	2314      	movs	r3, #20
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 fc7f 	bl	8003de8 <memset>
	char line2_str[20] = {0};
 80004ea:	003b      	movs	r3, r7
 80004ec:	0018      	movs	r0, r3
 80004ee:	2314      	movs	r3, #20
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f003 fc78 	bl	8003de8 <memset>
	sprintf(line1_str, "P1:%04u   P2:%04u", (uint16_t)pot1_value, (uint16_t)pot2_value);
 80004f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	001a      	movs	r2, r3
 80004fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000500:	b29b      	uxth	r3, r3
 8000502:	4919      	ldr	r1, [pc, #100]	@ (8000568 <Timer_Interrupt_Handler+0xac>)
 8000504:	1938      	adds	r0, r7, r4
 8000506:	f003 fc3b 	bl	8003d80 <siprintf>
	sprintf(line2_str, "ROT:%03u SWITCH:%s", rotary_counter, button_state ? " ON" : "OFF");
 800050a:	4b18      	ldr	r3, [pc, #96]	@ (800056c <Timer_Interrupt_Handler+0xb0>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	001a      	movs	r2, r3
 8000510:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <Timer_Interrupt_Handler+0xb4>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <Timer_Interrupt_Handler+0x60>
 8000518:	4b16      	ldr	r3, [pc, #88]	@ (8000574 <Timer_Interrupt_Handler+0xb8>)
 800051a:	e000      	b.n	800051e <Timer_Interrupt_Handler+0x62>
 800051c:	4b16      	ldr	r3, [pc, #88]	@ (8000578 <Timer_Interrupt_Handler+0xbc>)
 800051e:	4917      	ldr	r1, [pc, #92]	@ (800057c <Timer_Interrupt_Handler+0xc0>)
 8000520:	0038      	movs	r0, r7
 8000522:	f003 fc2d 	bl	8003d80 <siprintf>
	ssd1306_SetCursor(0, 0);
 8000526:	2100      	movs	r1, #0
 8000528:	2000      	movs	r0, #0
 800052a:	f000 fe6f 	bl	800120c <ssd1306_SetCursor>
	ssd1306_WriteString(line1_str, Font_7x10, White);
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <Timer_Interrupt_Handler+0xc4>)
 8000530:	2314      	movs	r3, #20
 8000532:	18f8      	adds	r0, r7, r3
 8000534:	2301      	movs	r3, #1
 8000536:	6811      	ldr	r1, [r2, #0]
 8000538:	6852      	ldr	r2, [r2, #4]
 800053a:	f000 fe3d 	bl	80011b8 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 11);
 800053e:	210b      	movs	r1, #11
 8000540:	2000      	movs	r0, #0
 8000542:	f000 fe63 	bl	800120c <ssd1306_SetCursor>
	ssd1306_WriteString(line2_str, Font_7x10, White);
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <Timer_Interrupt_Handler+0xc4>)
 8000548:	0038      	movs	r0, r7
 800054a:	2301      	movs	r3, #1
 800054c:	6811      	ldr	r1, [r2, #0]
 800054e:	6852      	ldr	r2, [r2, #4]
 8000550:	f000 fe32 	bl	80011b8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000554:	f000 fd08 	bl	8000f68 <ssd1306_UpdateScreen>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b00d      	add	sp, #52	@ 0x34
 800055e:	bd90      	pop	{r4, r7, pc}
 8000560:	28000400 	.word	0x28000400
 8000564:	2c000800 	.word	0x2c000800
 8000568:	080046d4 	.word	0x080046d4
 800056c:	20000171 	.word	0x20000171
 8000570:	20000172 	.word	0x20000172
 8000574:	080046e8 	.word	0x080046e8
 8000578:	080046ec 	.word	0x080046ec
 800057c:	080046f0 	.word	0x080046f0
 8000580:	20000004 	.word	0x20000004

08000584 <User_Button_Interrupt_Handler>:
/**
  * @brief  Interrupt handler for User Button GPIO
  * @note	This function is called when a rising edge is detected on User Button input pin
  */
void User_Button_Interrupt_Handler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	button_state = HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 8000588:	23a0      	movs	r3, #160	@ 0xa0
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2110      	movs	r1, #16
 800058e:	0018      	movs	r0, r3
 8000590:	f001 fd3e 	bl	8002010 <HAL_GPIO_ReadPin>
 8000594:	0003      	movs	r3, r0
 8000596:	001a      	movs	r2, r3
 8000598:	4b02      	ldr	r3, [pc, #8]	@ (80005a4 <User_Button_Interrupt_Handler+0x20>)
 800059a:	701a      	strb	r2, [r3, #0]
}
 800059c:	46c0      	nop			@ (mov r8, r8)
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	20000172 	.word	0x20000172

080005a8 <Rotary_Encoder_Interrupt_Handler>:
/**
  * @brief  Interrupt handler for Rotary Encoder Channel A
  * @note	This function is called when a rising edge is detected on channel A of the rotary encoder
  */
void Rotary_Encoder_Interrupt_Handler(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
	static int8_t rotary_buffer = 0;
	/* Check for rotary encoder turned clockwise or counter-clockwise */
	HAL_Delay(5);
 80005ae:	2005      	movs	r0, #5
 80005b0:	f000 ff1e 	bl	80013f0 <HAL_Delay>
	uint8_t rotary_new = HAL_GPIO_ReadPin(ROT_CHA_GPIO_Port, ROT_CHA_Pin) << 1;
 80005b4:	23a0      	movs	r3, #160	@ 0xa0
 80005b6:	05db      	lsls	r3, r3, #23
 80005b8:	2101      	movs	r1, #1
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 fd28 	bl	8002010 <HAL_GPIO_ReadPin>
 80005c0:	0003      	movs	r3, r0
 80005c2:	1dfa      	adds	r2, r7, #7
 80005c4:	18db      	adds	r3, r3, r3
 80005c6:	7013      	strb	r3, [r2, #0]
	rotary_new += HAL_GPIO_ReadPin(ROT_CHB_GPIO_Port, ROT_CHB_Pin);
 80005c8:	23a0      	movs	r3, #160	@ 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2102      	movs	r1, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 fd1e 	bl	8002010 <HAL_GPIO_ReadPin>
 80005d4:	0003      	movs	r3, r0
 80005d6:	0019      	movs	r1, r3
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	1dfa      	adds	r2, r7, #7
 80005dc:	7812      	ldrb	r2, [r2, #0]
 80005de:	188a      	adds	r2, r1, r2
 80005e0:	701a      	strb	r2, [r3, #0]
	if (rotary_new != rotary_state) {
 80005e2:	4b3e      	ldr	r3, [pc, #248]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	1dfa      	adds	r2, r7, #7
 80005e8:	7812      	ldrb	r2, [r2, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d100      	bne.n	80005f0 <Rotary_Encoder_Interrupt_Handler+0x48>
 80005ee:	e071      	b.n	80006d4 <Rotary_Encoder_Interrupt_Handler+0x12c>
		if (((rotary_state == 0b00) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 80005f0:	4b3a      	ldr	r3, [pc, #232]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d103      	bne.n	8000600 <Rotary_Encoder_Interrupt_Handler+0x58>
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d017      	beq.n	8000630 <Rotary_Encoder_Interrupt_Handler+0x88>
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d103      	bne.n	8000610 <Rotary_Encoder_Interrupt_Handler+0x68>
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b03      	cmp	r3, #3
 800060e:	d00f      	beq.n	8000630 <Rotary_Encoder_Interrupt_Handler+0x88>
				((rotary_state == 0b11) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b00))) {
 8000610:	4b32      	ldr	r3, [pc, #200]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000612:	781b      	ldrb	r3, [r3, #0]
		if (((rotary_state == 0b00) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b11)) ||
 8000614:	2b03      	cmp	r3, #3
 8000616:	d103      	bne.n	8000620 <Rotary_Encoder_Interrupt_Handler+0x78>
				((rotary_state == 0b11) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b00))) {
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d007      	beq.n	8000630 <Rotary_Encoder_Interrupt_Handler+0x88>
 8000620:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d10c      	bne.n	8000642 <Rotary_Encoder_Interrupt_Handler+0x9a>
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d108      	bne.n	8000642 <Rotary_Encoder_Interrupt_Handler+0x9a>
			rotary_buffer ++;
 8000630:	4b2b      	ldr	r3, [pc, #172]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	3301      	adds	r3, #1
 800063a:	b2db      	uxtb	r3, r3
 800063c:	b25a      	sxtb	r2, r3
 800063e:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 8000640:	701a      	strb	r2, [r3, #0]
		}
		if (((rotary_state == 0b00) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d103      	bne.n	8000652 <Rotary_Encoder_Interrupt_Handler+0xaa>
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d017      	beq.n	8000682 <Rotary_Encoder_Interrupt_Handler+0xda>
 8000652:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d103      	bne.n	8000662 <Rotary_Encoder_Interrupt_Handler+0xba>
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d00f      	beq.n	8000682 <Rotary_Encoder_Interrupt_Handler+0xda>
				((rotary_state == 0b11) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b00))) {
 8000662:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000664:	781b      	ldrb	r3, [r3, #0]
		if (((rotary_state == 0b00) && (rotary_new == 0b01)) || ((rotary_state == 0b01) && (rotary_new == 0b11)) ||
 8000666:	2b03      	cmp	r3, #3
 8000668:	d103      	bne.n	8000672 <Rotary_Encoder_Interrupt_Handler+0xca>
				((rotary_state == 0b11) && (rotary_new == 0b10)) || ((rotary_state == 0b10) && (rotary_new == 0b00))) {
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b02      	cmp	r3, #2
 8000670:	d007      	beq.n	8000682 <Rotary_Encoder_Interrupt_Handler+0xda>
 8000672:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b02      	cmp	r3, #2
 8000678:	d10c      	bne.n	8000694 <Rotary_Encoder_Interrupt_Handler+0xec>
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d108      	bne.n	8000694 <Rotary_Encoder_Interrupt_Handler+0xec>
			rotary_buffer --;
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b25b      	sxtb	r3, r3
 8000688:	b2db      	uxtb	r3, r3
 800068a:	3b01      	subs	r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	b25a      	sxtb	r2, r3
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 8000692:	701a      	strb	r2, [r3, #0]
		}
		rotary_state = rotary_new;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <Rotary_Encoder_Interrupt_Handler+0x134>)
 8000696:	1dfa      	adds	r2, r7, #7
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	701a      	strb	r2, [r3, #0]
		if (rotary_buffer > 3) {
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b25b      	sxtb	r3, r3
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	dd08      	ble.n	80006b8 <Rotary_Encoder_Interrupt_Handler+0x110>
			rotary_counter ++;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <Rotary_Encoder_Interrupt_Handler+0x13c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	b2da      	uxtb	r2, r3
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <Rotary_Encoder_Interrupt_Handler+0x13c>)
 80006b0:	701a      	strb	r2, [r3, #0]
			rotary_buffer = 0;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
		}
		if (rotary_buffer < -3) {
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	3303      	adds	r3, #3
 80006c0:	da08      	bge.n	80006d4 <Rotary_Encoder_Interrupt_Handler+0x12c>
			rotary_counter --;
 80006c2:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <Rotary_Encoder_Interrupt_Handler+0x13c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <Rotary_Encoder_Interrupt_Handler+0x13c>)
 80006cc:	701a      	strb	r2, [r3, #0]
			rotary_buffer = 0;
 80006ce:	4b04      	ldr	r3, [pc, #16]	@ (80006e0 <Rotary_Encoder_Interrupt_Handler+0x138>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b002      	add	sp, #8
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000170 	.word	0x20000170
 80006e0:	20000173 	.word	0x20000173
 80006e4:	20000171 	.word	0x20000171

080006e8 <Get_ADC_Value>:
  * @param  hadc ADC handle
  * @param  adc_channel Channel macro such as ADC_CHANNEL_0, ADC_CHANNEL_1, etc.
  * @retval Channel converted value
  */
uint32_t Get_ADC_Value(uint32_t adc_channel)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b085      	sub	sp, #20
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	/* Disable all previous channel configuration */
	hadc.Instance->CHSELR = 0;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <Get_ADC_Value+0x78>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	@ 0x28
	ADC_ChannelConfTypeDef sConfig = {0};
 80006f8:	2408      	movs	r4, #8
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2308      	movs	r3, #8
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f003 fb70 	bl	8003de8 <memset>
	sConfig.Channel = adc_channel;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2280      	movs	r2, #128	@ 0x80
 8000714:	0152      	lsls	r2, r2, #5
 8000716:	605a      	str	r2, [r3, #4]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000718:	187a      	adds	r2, r7, r1
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <Get_ADC_Value+0x78>)
 800071c:	0011      	movs	r1, r2
 800071e:	0018      	movs	r0, r3
 8000720:	f001 f8fa 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <Get_ADC_Value+0x44>
	{
		Error_Handler();
 8000728:	f000 fa1e 	bl	8000b68 <Error_Handler>
	}
	if (HAL_ADC_Start(&hadc) != HAL_OK)
 800072c:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <Get_ADC_Value+0x78>)
 800072e:	0018      	movs	r0, r3
 8000730:	f000 fff6 	bl	8001720 <HAL_ADC_Start>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <Get_ADC_Value+0x54>
	{
		Error_Handler();
 8000738:	f000 fa16 	bl	8000b68 <Error_Handler>
	}
	if (HAL_ADC_PollForConversion(&hadc, 100) != HAL_OK)
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <Get_ADC_Value+0x78>)
 800073e:	2164      	movs	r1, #100	@ 0x64
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f841 	bl	80017c8 <HAL_ADC_PollForConversion>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <Get_ADC_Value+0x66>
	{
		Error_Handler();
 800074a:	f000 fa0d 	bl	8000b68 <Error_Handler>
	}
	return HAL_ADC_GetValue(&hadc);
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <Get_ADC_Value+0x78>)
 8000750:	0018      	movs	r0, r3
 8000752:	f001 f8d5 	bl	8001900 <HAL_ADC_GetValue>
 8000756:	0003      	movs	r3, r0
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	b005      	add	sp, #20
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	20000080 	.word	0x20000080

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000768:	f000 fdd2 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076c:	f000 f832 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000770:	f000 f992 	bl	8000a98 <MX_GPIO_Init>
  MX_ADC_Init();
 8000774:	f000 f8a0 	bl	80008b8 <MX_ADC_Init>
  MX_I2C1_Init();
 8000778:	f000 f912 	bl	80009a0 <MX_I2C1_Init>
  MX_TIM6_Init();
 800077c:	f000 f950 	bl	8000a20 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000780:	f000 fb62 	bl	8000e48 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000784:	2000      	movs	r0, #0
 8000786:	f000 fbcb 	bl	8000f20 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 800078a:	f000 fbed 	bl	8000f68 <ssd1306_UpdateScreen>
  HAL_TIM_Base_Start_IT(&htim6);
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <main+0x68>)
 8000790:	0018      	movs	r0, r3
 8000792:	f003 f8ed 	bl	8003970 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  rotary_state = HAL_GPIO_ReadPin(ROT_CHA_GPIO_Port, ROT_CHA_Pin) << 1;
 8000796:	23a0      	movs	r3, #160	@ 0xa0
 8000798:	05db      	lsls	r3, r3, #23
 800079a:	2101      	movs	r1, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f001 fc37 	bl	8002010 <HAL_GPIO_ReadPin>
 80007a2:	0003      	movs	r3, r0
 80007a4:	18db      	adds	r3, r3, r3
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <main+0x6c>)
 80007aa:	701a      	strb	r2, [r3, #0]
  rotary_state += HAL_GPIO_ReadPin(ROT_CHB_GPIO_Port, ROT_CHB_Pin);
 80007ac:	23a0      	movs	r3, #160	@ 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	2102      	movs	r1, #2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fc2c 	bl	8002010 <HAL_GPIO_ReadPin>
 80007b8:	0003      	movs	r3, r0
 80007ba:	001a      	movs	r2, r3
 80007bc:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <main+0x6c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	18d3      	adds	r3, r2, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b02      	ldr	r3, [pc, #8]	@ (80007d0 <main+0x6c>)
 80007c6:	701a      	strb	r2, [r3, #0]
  while (1)
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	e7fd      	b.n	80007c8 <main+0x64>
 80007cc:	20000130 	.word	0x20000130
 80007d0:	20000170 	.word	0x20000170

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b09d      	sub	sp, #116	@ 0x74
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	2438      	movs	r4, #56	@ 0x38
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2338      	movs	r3, #56	@ 0x38
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f003 faff 	bl	8003de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ea:	2324      	movs	r3, #36	@ 0x24
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	2314      	movs	r3, #20
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 faf7 	bl	8003de8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	2324      	movs	r3, #36	@ 0x24
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 faf0 	bl	8003de8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000808:	4b29      	ldr	r3, [pc, #164]	@ (80008b0 <SystemClock_Config+0xdc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a29      	ldr	r2, [pc, #164]	@ (80008b4 <SystemClock_Config+0xe0>)
 800080e:	401a      	ands	r2, r3
 8000810:	4b27      	ldr	r3, [pc, #156]	@ (80008b0 <SystemClock_Config+0xdc>)
 8000812:	2180      	movs	r1, #128	@ 0x80
 8000814:	0109      	lsls	r1, r1, #4
 8000816:	430a      	orrs	r2, r1
 8000818:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081a:	0021      	movs	r1, r4
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2202      	movs	r2, #2
 8000820:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2201      	movs	r2, #1
 8000826:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2210      	movs	r2, #16
 800082c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2202      	movs	r2, #2
 8000832:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	02d2      	lsls	r2, r2, #11
 8000840:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	03d2      	lsls	r2, r2, #15
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	187b      	adds	r3, r7, r1
 800084c:	0018      	movs	r0, r3
 800084e:	f002 f90f 	bl	8002a70 <HAL_RCC_OscConfig>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000856:	f000 f987 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	2124      	movs	r1, #36	@ 0x24
 800085c:	187b      	adds	r3, r7, r1
 800085e:	220f      	movs	r2, #15
 8000860:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2203      	movs	r2, #3
 8000866:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2101      	movs	r1, #1
 800087e:	0018      	movs	r0, r3
 8000880:	f002 fcba 	bl	80031f8 <HAL_RCC_ClockConfig>
 8000884:	1e03      	subs	r3, r0, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000888:	f000 f96e 	bl	8000b68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800088c:	003b      	movs	r3, r7
 800088e:	2208      	movs	r2, #8
 8000890:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000892:	003b      	movs	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000898:	003b      	movs	r3, r7
 800089a:	0018      	movs	r0, r3
 800089c:	f002 fe9a 	bl	80035d4 <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80008a4:	f000 f960 	bl	8000b68 <Error_Handler>
  }
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b01d      	add	sp, #116	@ 0x74
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40007000 	.word	0x40007000
 80008b4:	ffffe7ff 	.word	0xffffe7ff

080008b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008be:	003b      	movs	r3, r7
 80008c0:	0018      	movs	r0, r3
 80008c2:	2308      	movs	r3, #8
 80008c4:	001a      	movs	r2, r3
 80008c6:	2100      	movs	r1, #0
 80008c8:	f003 fa8e 	bl	8003de8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008cc:	4b30      	ldr	r3, [pc, #192]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008ce:	4a31      	ldr	r2, [pc, #196]	@ (8000994 <MX_ADC_Init+0xdc>)
 80008d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80008d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008da:	2280      	movs	r2, #128	@ 0x80
 80008dc:	05d2      	lsls	r2, r2, #23
 80008de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008ec:	4b28      	ldr	r3, [pc, #160]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008f2:	4b27      	ldr	r3, [pc, #156]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008f8:	4b25      	ldr	r3, [pc, #148]	@ (8000990 <MX_ADC_Init+0xd8>)
 80008fa:	2220      	movs	r2, #32
 80008fc:	2100      	movs	r1, #0
 80008fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000900:	4b23      	ldr	r3, [pc, #140]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000902:	2221      	movs	r2, #33	@ 0x21
 8000904:	2100      	movs	r1, #0
 8000906:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000908:	4b21      	ldr	r3, [pc, #132]	@ (8000990 <MX_ADC_Init+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800090e:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000910:	22c2      	movs	r2, #194	@ 0xc2
 8000912:	32ff      	adds	r2, #255	@ 0xff
 8000914:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000916:	4b1e      	ldr	r3, [pc, #120]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000918:	222c      	movs	r2, #44	@ 0x2c
 800091a:	2100      	movs	r1, #0
 800091c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000920:	2204      	movs	r2, #4
 8000922:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000924:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_ADC_Init+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000932:	2200      	movs	r2, #0
 8000934:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800093c:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_ADC_Init+0xd8>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fd7a 	bl	8001438 <HAL_ADC_Init>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000948:	f000 f90e 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800094c:	003b      	movs	r3, r7
 800094e:	4a12      	ldr	r2, [pc, #72]	@ (8000998 <MX_ADC_Init+0xe0>)
 8000950:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000952:	003b      	movs	r3, r7
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0152      	lsls	r2, r2, #5
 8000958:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800095a:	003a      	movs	r2, r7
 800095c:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <MX_ADC_Init+0xd8>)
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f000 ffd9 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800096a:	f000 f8fd 	bl	8000b68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800096e:	003b      	movs	r3, r7
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <MX_ADC_Init+0xe4>)
 8000972:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000974:	003a      	movs	r2, r7
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <MX_ADC_Init+0xd8>)
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 ffcc 	bl	8001918 <HAL_ADC_ConfigChannel>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000984:	f000 f8f0 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000080 	.word	0x20000080
 8000994:	40012400 	.word	0x40012400
 8000998:	28000400 	.word	0x28000400
 800099c:	2c000800 	.word	0x2c000800

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a18 <MX_I2C1_Init+0x78>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0060112F;
 80009aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009ac:	4a1b      	ldr	r2, [pc, #108]	@ (8000a1c <MX_I2C1_Init+0x7c>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009da:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 fb5b 	bl	8002098 <HAL_I2C_Init>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d001      	beq.n	80009ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009e6:	f000 f8bf 	bl	8000b68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009ec:	2100      	movs	r1, #0
 80009ee:	0018      	movs	r0, r3
 80009f0:	f001 ffa6 	bl	8002940 <HAL_I2CEx_ConfigAnalogFilter>
 80009f4:	1e03      	subs	r3, r0, #0
 80009f6:	d001      	beq.n	80009fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f8:	f000 f8b6 	bl	8000b68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <MX_I2C1_Init+0x74>)
 80009fe:	2100      	movs	r1, #0
 8000a00:	0018      	movs	r0, r3
 8000a02:	f001 ffe9 	bl	80029d8 <HAL_I2CEx_ConfigDigitalFilter>
 8000a06:	1e03      	subs	r3, r0, #0
 8000a08:	d001      	beq.n	8000a0e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0a:	f000 f8ad 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	200000dc 	.word	0x200000dc
 8000a18:	40005400 	.word	0x40005400
 8000a1c:	0060112f 	.word	0x0060112f

08000a20 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	003b      	movs	r3, r7
 8000a28:	0018      	movs	r0, r3
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	001a      	movs	r2, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	f003 f9da 	bl	8003de8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a34:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a36:	4a16      	ldr	r2, [pc, #88]	@ (8000a90 <MX_TIM6_Init+0x70>)
 8000a38:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 2096;
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a3c:	2283      	movs	r2, #131	@ 0x83
 8000a3e:	0112      	lsls	r2, r2, #4
 8000a40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <MX_TIM6_Init+0x74>)
 8000a4c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a54:	4b0d      	ldr	r3, [pc, #52]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 ff4a 	bl	80038f0 <HAL_TIM_Base_Init>
 8000a5c:	1e03      	subs	r3, r0, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000a60:	f000 f882 	bl	8000b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a64:	003b      	movs	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a70:	003a      	movs	r2, r7
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_TIM6_Init+0x6c>)
 8000a74:	0011      	movs	r1, r2
 8000a76:	0018      	movs	r0, r3
 8000a78:	f003 f92a 	bl	8003cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000a80:	f000 f872 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000130 	.word	0x20000130
 8000a90:	40001000 	.word	0x40001000
 8000a94:	000003e7 	.word	0x000003e7

08000a98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a98:	b590      	push	{r4, r7, lr}
 8000a9a:	b089      	sub	sp, #36	@ 0x24
 8000a9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9e:	240c      	movs	r4, #12
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2314      	movs	r3, #20
 8000aa6:	001a      	movs	r2, r3
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f003 f99d 	bl	8003de8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aae:	4b2d      	ldr	r3, [pc, #180]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aba:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abe:	2204      	movs	r2, #4
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b27      	ldr	r3, [pc, #156]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aca:	4b26      	ldr	r3, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	430a      	orrs	r2, r1
 8000ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ad2:	4b24      	ldr	r3, [pc, #144]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4013      	ands	r3, r2
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ae2:	4b20      	ldr	r3, [pc, #128]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000ae4:	2102      	movs	r1, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aea:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <MX_GPIO_Init+0xcc>)
 8000aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aee:	2202      	movs	r2, #2
 8000af0:	4013      	ands	r3, r2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : ROT_CHA_Pin USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = ROT_CHA_Pin|USER_BUTTON_Pin;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2211      	movs	r2, #17
 8000afa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	22c4      	movs	r2, #196	@ 0xc4
 8000b00:	0392      	lsls	r2, r2, #14
 8000b02:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	193a      	adds	r2, r7, r4
 8000b0c:	23a0      	movs	r3, #160	@ 0xa0
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	0011      	movs	r1, r2
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 f906 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT_CHB_Pin */
  GPIO_InitStruct.Pin = ROT_CHB_Pin;
 8000b18:	0021      	movs	r1, r4
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2288      	movs	r2, #136	@ 0x88
 8000b24:	0352      	lsls	r2, r2, #13
 8000b26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ROT_CHB_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	187a      	adds	r2, r7, r1
 8000b30:	23a0      	movs	r3, #160	@ 0xa0
 8000b32:	05db      	lsls	r3, r3, #23
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f001 f8f4 	bl	8001d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 1, 0);
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2101      	movs	r1, #1
 8000b40:	2005      	movs	r0, #5
 8000b42:	f001 f8bd 	bl	8001cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b46:	2005      	movs	r0, #5
 8000b48:	f001 f8cf 	bl	8001cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2102      	movs	r1, #2
 8000b50:	2007      	movs	r0, #7
 8000b52:	f001 f8b5 	bl	8001cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000b56:	2007      	movs	r0, #7
 8000b58:	f001 f8c7 	bl	8001cea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b5c:	46c0      	nop			@ (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b009      	add	sp, #36	@ 0x24
 8000b62:	bd90      	pop	{r4, r7, pc}
 8000b64:	40021000 	.word	0x40021000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4b07      	ldr	r3, [pc, #28]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b7e:	2101      	movs	r1, #1
 8000b80:	430a      	orrs	r2, r1
 8000b82:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_MspInit+0x24>)
 8000b8a:	2180      	movs	r1, #128	@ 0x80
 8000b8c:	0549      	lsls	r1, r1, #21
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	@ 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	240c      	movs	r4, #12
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f003 f91a 	bl	8003de8 <memset>
  if(hadc->Instance==ADC1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	@ (8000c0c <HAL_ADC_MspInit+0x70>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d121      	bne.n	8000c02 <HAL_ADC_MspInit+0x66>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bbe:	4b14      	ldr	r3, [pc, #80]	@ (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bc4:	2180      	movs	r1, #128	@ 0x80
 8000bc6:	0089      	lsls	r1, r1, #2
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bcc:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_ADC_MspInit+0x74>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4013      	ands	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC0     ------> ADC_IN10
    PC1     ------> ADC_IN11
    */
    GPIO_InitStruct.Pin = POT_1_Pin|POT_2_Pin;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2203      	movs	r2, #3
 8000be8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2203      	movs	r2, #3
 8000bee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	4a06      	ldr	r2, [pc, #24]	@ (8000c14 <HAL_ADC_MspInit+0x78>)
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	f001 f891 	bl	8001d24 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c02:	46c0      	nop			@ (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b009      	add	sp, #36	@ 0x24
 8000c08:	bd90      	pop	{r4, r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	40012400 	.word	0x40012400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	50000800 	.word	0x50000800

08000c18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b089      	sub	sp, #36	@ 0x24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	240c      	movs	r4, #12
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2314      	movs	r3, #20
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f003 f8dc 	bl	8003de8 <memset>
  if(hi2c->Instance==I2C1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <HAL_I2C_MspInit+0x80>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d129      	bne.n	8000c8e <HAL_I2C_MspInit+0x76>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b18      	ldr	r3, [pc, #96]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3e:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c40:	2102      	movs	r1, #2
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	22c0      	movs	r2, #192	@ 0xc0
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	0021      	movs	r1, r4
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2212      	movs	r2, #18
 8000c60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2204      	movs	r2, #4
 8000c72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <HAL_I2C_MspInit+0x88>)
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0010      	movs	r0, r2
 8000c7c:	f001 f852 	bl	8001d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <HAL_I2C_MspInit+0x84>)
 8000c86:	2180      	movs	r1, #128	@ 0x80
 8000c88:	0389      	lsls	r1, r1, #14
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b009      	add	sp, #36	@ 0x24
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	50000400 	.word	0x50000400

08000ca4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <HAL_TIM_Base_MspInit+0x38>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x3c>)
 8000cb8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x3c>)
 8000cbc:	2110      	movs	r1, #16
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2103      	movs	r1, #3
 8000cc6:	2011      	movs	r0, #17
 8000cc8:	f000 fffa 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ccc:	2011      	movs	r0, #17
 8000cce:	f001 f80c 	bl	8001cea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	40001000 	.word	0x40001000
 8000ce0:	40021000 	.word	0x40021000

08000ce4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	e7fd      	b.n	8000ce8 <NMI_Handler+0x4>

08000cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	e7fd      	b.n	8000cf0 <HardFault_Handler+0x4>

08000cf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf8:	46c0      	nop			@ (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0c:	f000 fb54 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d10:	46c0      	nop			@ (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */
  Rotary_Encoder_Interrupt_Handler();
 8000d1a:	f7ff fc45 	bl	80005a8 <Rotary_Encoder_Interrupt_Handler>
  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_CHA_Pin);
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f001 f994 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_CHB_Pin);
 8000d24:	2002      	movs	r0, #2
 8000d26:	f001 f991 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */
  User_Button_Interrupt_Handler();
 8000d34:	f7ff fc26 	bl	8000584 <User_Button_Interrupt_Handler>
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8000d38:	2010      	movs	r0, #16
 8000d3a:	f001 f987 	bl	800204c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
  Timer_Interrupt_Handler();
 8000d48:	f7ff fbb8 	bl	80004bc <Timer_Interrupt_Handler>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d4c:	4b03      	ldr	r3, [pc, #12]	@ (8000d5c <TIM6_DAC_IRQHandler+0x18>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 fe5a 	bl	8003a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	20000130 	.word	0x20000130

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	@ (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	@ (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	18d3      	adds	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f003 f832 	bl	8003df8 <__errno>
 8000d94:	0003      	movs	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	425b      	negs	r3, r3
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	18d2      	adds	r2, r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <_sbrk+0x64>)
 8000db0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b006      	add	sp, #24
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20002000 	.word	0x20002000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000174 	.word	0x20000174
 8000dc8:	200004d0 	.word	0x200004d0

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b086      	sub	sp, #24
 8000de4:	af04      	add	r7, sp, #16
 8000de6:	0002      	movs	r2, r0
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000dec:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <ssd1306_WriteCommand+0x30>)
 8000dee:	2301      	movs	r3, #1
 8000df0:	425b      	negs	r3, r3
 8000df2:	9302      	str	r3, [sp, #8]
 8000df4:	2301      	movs	r3, #1
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	1dfb      	adds	r3, r7, #7
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2178      	movs	r1, #120	@ 0x78
 8000e02:	f001 f9df 	bl	80021c4 <HAL_I2C_Mem_Write>
}
 8000e06:	46c0      	nop			@ (mov r8, r8)
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	200000dc 	.word	0x200000dc

08000e14 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <ssd1306_WriteData+0x30>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	4252      	negs	r2, r2
 8000e28:	9202      	str	r2, [sp, #8]
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	2240      	movs	r2, #64	@ 0x40
 8000e34:	2178      	movs	r1, #120	@ 0x78
 8000e36:	f001 f9c5 	bl	80021c4 <HAL_I2C_Mem_Write>
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b002      	add	sp, #8
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	200000dc 	.word	0x200000dc

08000e48 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000e4c:	f7ff ffc3 	bl	8000dd6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f000 facd 	bl	80013f0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 fa0a 	bl	8001270 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000e5c:	2020      	movs	r0, #32
 8000e5e:	f7ff ffbf 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffbc 	bl	8000de0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e68:	20b0      	movs	r0, #176	@ 0xb0
 8000e6a:	f7ff ffb9 	bl	8000de0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e6e:	20c8      	movs	r0, #200	@ 0xc8
 8000e70:	f7ff ffb6 	bl	8000de0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000e74:	2000      	movs	r0, #0
 8000e76:	f7ff ffb3 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000e7a:	2010      	movs	r0, #16
 8000e7c:	f7ff ffb0 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000e80:	2040      	movs	r0, #64	@ 0x40
 8000e82:	f7ff ffad 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000e86:	20ff      	movs	r0, #255	@ 0xff
 8000e88:	f000 f9da 	bl	8001240 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000e8c:	20a1      	movs	r0, #161	@ 0xa1
 8000e8e:	f7ff ffa7 	bl	8000de0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000e92:	20a6      	movs	r0, #166	@ 0xa6
 8000e94:	f7ff ffa4 	bl	8000de0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e98:	20a8      	movs	r0, #168	@ 0xa8
 8000e9a:	f7ff ffa1 	bl	8000de0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8000e9e:	201f      	movs	r0, #31
 8000ea0:	f7ff ff9e 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000ea4:	20a4      	movs	r0, #164	@ 0xa4
 8000ea6:	f7ff ff9b 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000eaa:	20d3      	movs	r0, #211	@ 0xd3
 8000eac:	f7ff ff98 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f7ff ff95 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000eb6:	20d5      	movs	r0, #213	@ 0xd5
 8000eb8:	f7ff ff92 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000ebc:	20f0      	movs	r0, #240	@ 0xf0
 8000ebe:	f7ff ff8f 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ec2:	20d9      	movs	r0, #217	@ 0xd9
 8000ec4:	f7ff ff8c 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ec8:	2022      	movs	r0, #34	@ 0x22
 8000eca:	f7ff ff89 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000ece:	20da      	movs	r0, #218	@ 0xda
 8000ed0:	f7ff ff86 	bl	8000de0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8000ed4:	2002      	movs	r0, #2
 8000ed6:	f7ff ff83 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000eda:	20db      	movs	r0, #219	@ 0xdb
 8000edc:	f7ff ff80 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ee0:	2020      	movs	r0, #32
 8000ee2:	f7ff ff7d 	bl	8000de0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000ee6:	208d      	movs	r0, #141	@ 0x8d
 8000ee8:	f7ff ff7a 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000eec:	2014      	movs	r0, #20
 8000eee:	f7ff ff77 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f000 f9bc 	bl	8001270 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f811 	bl	8000f20 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000efe:	f000 f833 	bl	8000f68 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <ssd1306_Init+0xd4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <ssd1306_Init+0xd4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000f0e:	4b03      	ldr	r3, [pc, #12]	@ (8000f1c <ssd1306_Init+0xd4>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	711a      	strb	r2, [r3, #4]
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	20000378 	.word	0x20000378

08000f20 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	0002      	movs	r2, r0
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e00e      	b.n	8000f50 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <ssd1306_Fill+0x1e>
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	e000      	b.n	8000f40 <ssd1306_Fill+0x20>
 8000f3e:	21ff      	movs	r1, #255	@ 0xff
 8000f40:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <ssd1306_Fill+0x44>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	1c0a      	adds	r2, r1, #0
 8000f48:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3eb      	bcc.n	8000f32 <ssd1306_Fill+0x12>
    }
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b004      	add	sp, #16
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000178 	.word	0x20000178

08000f68 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e01a      	b.n	8000fac <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	3b50      	subs	r3, #80	@ 0x50
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff ff2e 	bl	8000de0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff ff2b 	bl	8000de0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000f8a:	2010      	movs	r0, #16
 8000f8c:	f7ff ff28 	bl	8000de0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	01da      	lsls	r2, r3, #7
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <ssd1306_UpdateScreen+0x58>)
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	2180      	movs	r1, #128	@ 0x80
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff ff39 	bl	8000e14 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	781a      	ldrb	r2, [r3, #0]
 8000fa6:	1dfb      	adds	r3, r7, #7
 8000fa8:	3201      	adds	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d9e0      	bls.n	8000f76 <ssd1306_UpdateScreen+0xe>
    }
}
 8000fb4:	46c0      	nop			@ (mov r8, r8)
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b002      	add	sp, #8
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	20000178 	.word	0x20000178

08000fc4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	0004      	movs	r4, r0
 8000fcc:	0008      	movs	r0, r1
 8000fce:	0011      	movs	r1, r2
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	1c22      	adds	r2, r4, #0
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	1dbb      	adds	r3, r7, #6
 8000fd8:	1c02      	adds	r2, r0, #0
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	1d7b      	adds	r3, r7, #5
 8000fde:	1c0a      	adds	r2, r1, #0
 8000fe0:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db47      	blt.n	800107c <ssd1306_DrawPixel+0xb8>
 8000fec:	1dbb      	adds	r3, r7, #6
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	d843      	bhi.n	800107c <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000ff4:	1d7b      	adds	r3, r7, #5
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d11e      	bne.n	800103a <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000ffc:	1dfb      	adds	r3, r7, #7
 8000ffe:	781a      	ldrb	r2, [r3, #0]
 8001000:	1dbb      	adds	r3, r7, #6
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	08db      	lsrs	r3, r3, #3
 8001006:	b2d8      	uxtb	r0, r3
 8001008:	0003      	movs	r3, r0
 800100a:	01db      	lsls	r3, r3, #7
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	4a1d      	ldr	r2, [pc, #116]	@ (8001084 <ssd1306_DrawPixel+0xc0>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	b25a      	sxtb	r2, r3
 8001014:	1dbb      	adds	r3, r7, #6
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2107      	movs	r1, #7
 800101a:	400b      	ands	r3, r1
 800101c:	2101      	movs	r1, #1
 800101e:	4099      	lsls	r1, r3
 8001020:	000b      	movs	r3, r1
 8001022:	b25b      	sxtb	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b259      	sxtb	r1, r3
 8001028:	1dfb      	adds	r3, r7, #7
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	0003      	movs	r3, r0
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	b2c9      	uxtb	r1, r1
 8001034:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <ssd1306_DrawPixel+0xc0>)
 8001036:	54d1      	strb	r1, [r2, r3]
 8001038:	e021      	b.n	800107e <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	1dbb      	adds	r3, r7, #6
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	b2d8      	uxtb	r0, r3
 8001046:	0003      	movs	r3, r0
 8001048:	01db      	lsls	r3, r3, #7
 800104a:	18d3      	adds	r3, r2, r3
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <ssd1306_DrawPixel+0xc0>)
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	1dba      	adds	r2, r7, #6
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	2107      	movs	r1, #7
 8001058:	400a      	ands	r2, r1
 800105a:	2101      	movs	r1, #1
 800105c:	4091      	lsls	r1, r2
 800105e:	000a      	movs	r2, r1
 8001060:	b252      	sxtb	r2, r2
 8001062:	43d2      	mvns	r2, r2
 8001064:	b252      	sxtb	r2, r2
 8001066:	4013      	ands	r3, r2
 8001068:	b259      	sxtb	r1, r3
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	0003      	movs	r3, r0
 8001070:	01db      	lsls	r3, r3, #7
 8001072:	18d3      	adds	r3, r2, r3
 8001074:	b2c9      	uxtb	r1, r1
 8001076:	4a03      	ldr	r2, [pc, #12]	@ (8001084 <ssd1306_DrawPixel+0xc0>)
 8001078:	54d1      	strb	r1, [r2, r3]
 800107a:	e000      	b.n	800107e <ssd1306_DrawPixel+0xba>
        return;
 800107c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800107e:	46bd      	mov	sp, r7
 8001080:	b003      	add	sp, #12
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	20000178 	.word	0x20000178

08001088 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	0004      	movs	r4, r0
 8001090:	1d38      	adds	r0, r7, #4
 8001092:	6001      	str	r1, [r0, #0]
 8001094:	6042      	str	r2, [r0, #4]
 8001096:	0019      	movs	r1, r3
 8001098:	200f      	movs	r0, #15
 800109a:	183b      	adds	r3, r7, r0
 800109c:	1c22      	adds	r2, r4, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	230e      	movs	r3, #14
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	1c0a      	adds	r2, r1, #0
 80010a6:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80010a8:	183b      	adds	r3, r7, r0
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b1f      	cmp	r3, #31
 80010ae:	d903      	bls.n	80010b8 <ssd1306_WriteChar+0x30>
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b7e      	cmp	r3, #126	@ 0x7e
 80010b6:	d901      	bls.n	80010bc <ssd1306_WriteChar+0x34>
        return 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	e077      	b.n	80011ac <ssd1306_WriteChar+0x124>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010bc:	4b3d      	ldr	r3, [pc, #244]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	001a      	movs	r2, r3
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	18d3      	adds	r3, r2, r3
 80010c8:	2b80      	cmp	r3, #128	@ 0x80
 80010ca:	dc07      	bgt.n	80010dc <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80010cc:	4b39      	ldr	r3, [pc, #228]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 80010ce:	885b      	ldrh	r3, [r3, #2]
 80010d0:	001a      	movs	r2, r3
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010d8:	2b20      	cmp	r3, #32
 80010da:	dd01      	ble.n	80010e0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	e065      	b.n	80011ac <ssd1306_WriteChar+0x124>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	e051      	b.n	800118a <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	230f      	movs	r3, #15
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3b20      	subs	r3, #32
 80010f2:	1d39      	adds	r1, r7, #4
 80010f4:	7849      	ldrb	r1, [r1, #1]
 80010f6:	434b      	muls	r3, r1
 80010f8:	0019      	movs	r1, r3
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	18cb      	adds	r3, r1, r3
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	18d3      	adds	r3, r2, r3
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	e035      	b.n	8001178 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 800110c:	697a      	ldr	r2, [r7, #20]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	409a      	lsls	r2, r3
 8001112:	2380      	movs	r3, #128	@ 0x80
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	4013      	ands	r3, r2
 8001118:	d014      	beq.n	8001144 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800111a:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	18d3      	adds	r3, r2, r3
 8001126:	b2d8      	uxtb	r0, r3
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 800112a:	885b      	ldrh	r3, [r3, #2]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	18d3      	adds	r3, r2, r3
 8001134:	b2d9      	uxtb	r1, r3
 8001136:	230e      	movs	r3, #14
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	001a      	movs	r2, r3
 800113e:	f7ff ff41 	bl	8000fc4 <ssd1306_DrawPixel>
 8001142:	e016      	b.n	8001172 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	18d3      	adds	r3, r2, r3
 8001150:	b2d8      	uxtb	r0, r3
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 8001154:	885b      	ldrh	r3, [r3, #2]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	b2d9      	uxtb	r1, r3
 8001160:	230e      	movs	r3, #14
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	425a      	negs	r2, r3
 8001168:	4153      	adcs	r3, r2
 800116a:	b2db      	uxtb	r3, r3
 800116c:	001a      	movs	r2, r3
 800116e:	f7ff ff29 	bl	8000fc4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	3301      	adds	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	4293      	cmp	r3, r2
 8001182:	d3c3      	bcc.n	800110c <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	3301      	adds	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	001a      	movs	r2, r3
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	4293      	cmp	r3, r2
 8001194:	d3a7      	bcc.n	80010e6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001196:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	1d3a      	adds	r2, r7, #4
 800119c:	7812      	ldrb	r2, [r2, #0]
 800119e:	189b      	adds	r3, r3, r2
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <ssd1306_WriteChar+0x12c>)
 80011a4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80011a6:	230f      	movs	r3, #15
 80011a8:	18fb      	adds	r3, r7, r3
 80011aa:	781b      	ldrb	r3, [r3, #0]
}
 80011ac:	0018      	movs	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b009      	add	sp, #36	@ 0x24
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	20000378 	.word	0x20000378

080011b8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	1d38      	adds	r0, r7, #4
 80011c2:	6001      	str	r1, [r0, #0]
 80011c4:	6042      	str	r2, [r0, #4]
 80011c6:	001a      	movs	r2, r3
 80011c8:	1cfb      	adds	r3, r7, #3
 80011ca:	701a      	strb	r2, [r3, #0]
    while (*str) {
 80011cc:	e014      	b.n	80011f8 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	7818      	ldrb	r0, [r3, #0]
 80011d2:	1cfb      	adds	r3, r7, #3
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	1d3a      	adds	r2, r7, #4
 80011d8:	6811      	ldr	r1, [r2, #0]
 80011da:	6852      	ldr	r2, [r2, #4]
 80011dc:	f7ff ff54 	bl	8001088 <ssd1306_WriteChar>
 80011e0:	0003      	movs	r3, r0
 80011e2:	001a      	movs	r2, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d002      	beq.n	80011f2 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	e008      	b.n	8001204 <ssd1306_WriteString+0x4c>
        }
        str++;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	3301      	adds	r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1e6      	bne.n	80011ce <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	781b      	ldrb	r3, [r3, #0]
}
 8001204:	0018      	movs	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	b004      	add	sp, #16
 800120a:	bd80      	pop	{r7, pc}

0800120c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	0002      	movs	r2, r0
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	701a      	strb	r2, [r3, #0]
 8001218:	1dbb      	adds	r3, r7, #6
 800121a:	1c0a      	adds	r2, r1, #0
 800121c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b29a      	uxth	r2, r3
 8001224:	4b05      	ldr	r3, [pc, #20]	@ (800123c <ssd1306_SetCursor+0x30>)
 8001226:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b03      	ldr	r3, [pc, #12]	@ (800123c <ssd1306_SetCursor+0x30>)
 8001230:	805a      	strh	r2, [r3, #2]
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	20000378 	.word	0x20000378

08001240 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	0002      	movs	r2, r0
 8001248:	1dfb      	adds	r3, r7, #7
 800124a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800124c:	210f      	movs	r1, #15
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2281      	movs	r2, #129	@ 0x81
 8001252:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001254:	187b      	adds	r3, r7, r1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	0018      	movs	r0, r3
 800125a:	f7ff fdc1 	bl	8000de0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff fdbc 	bl	8000de0 <ssd1306_WriteCommand>
}
 8001268:	46c0      	nop			@ (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}

08001270 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	0002      	movs	r2, r0
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 800127c:	1dfb      	adds	r3, r7, #7
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d007      	beq.n	8001294 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001284:	230f      	movs	r3, #15
 8001286:	18fb      	adds	r3, r7, r3
 8001288:	22af      	movs	r2, #175	@ 0xaf
 800128a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 800128c:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <ssd1306_SetDisplayOn+0x48>)
 800128e:	2201      	movs	r2, #1
 8001290:	715a      	strb	r2, [r3, #5]
 8001292:	e006      	b.n	80012a2 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	22ae      	movs	r2, #174	@ 0xae
 800129a:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <ssd1306_SetDisplayOn+0x48>)
 800129e:	2200      	movs	r2, #0
 80012a0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80012a2:	230f      	movs	r3, #15
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fd99 	bl	8000de0 <ssd1306_WriteCommand>
}
 80012ae:	46c0      	nop			@ (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b004      	add	sp, #16
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	20000378 	.word	0x20000378

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80012bc:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c0:	f7ff fd84 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f002 fd8b 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fa39 	bl	8000764 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   r0, =_estack
 80012f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001300:	08004ed0 	.word	0x08004ed0
  ldr r2, =_sbss
 8001304:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001308:	200004cc 	.word	0x200004cc

0800130c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_COMP_IRQHandler>
	...

08001310 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <HAL_Init+0x3c>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_Init+0x3c>)
 8001322:	2140      	movs	r1, #64	@ 0x40
 8001324:	430a      	orrs	r2, r1
 8001326:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001328:	2000      	movs	r0, #0
 800132a:	f000 f811 	bl	8001350 <HAL_InitTick>
 800132e:	1e03      	subs	r3, r0, #0
 8001330:	d003      	beq.n	800133a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e001      	b.n	800133e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800133a:	f7ff fc1b 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
}
 8001342:	0018      	movs	r0, r3
 8001344:	46bd      	mov	sp, r7
 8001346:	b002      	add	sp, #8
 8001348:	bd80      	pop	{r7, pc}
 800134a:	46c0      	nop			@ (mov r8, r8)
 800134c:	40022000 	.word	0x40022000

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b590      	push	{r4, r7, lr}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <HAL_InitTick+0x5c>)
 800135a:	681c      	ldr	r4, [r3, #0]
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_InitTick+0x60>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	0019      	movs	r1, r3
 8001362:	23fa      	movs	r3, #250	@ 0xfa
 8001364:	0098      	lsls	r0, r3, #2
 8001366:	f7fe fed9 	bl	800011c <__udivsi3>
 800136a:	0003      	movs	r3, r0
 800136c:	0019      	movs	r1, r3
 800136e:	0020      	movs	r0, r4
 8001370:	f7fe fed4 	bl	800011c <__udivsi3>
 8001374:	0003      	movs	r3, r0
 8001376:	0018      	movs	r0, r3
 8001378:	f000 fcc7 	bl	8001d0a <HAL_SYSTICK_Config>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e00f      	b.n	80013a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d80b      	bhi.n	80013a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	2301      	movs	r3, #1
 800138e:	425b      	negs	r3, r3
 8001390:	2200      	movs	r2, #0
 8001392:	0018      	movs	r0, r3
 8001394:	f000 fc94 	bl	8001cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_InitTick+0x64>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b003      	add	sp, #12
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000010 	.word	0x20000010
 80013b4:	2000000c 	.word	0x2000000c

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	001a      	movs	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	18d2      	adds	r2, r2, r3
 80013c8:	4b03      	ldr	r3, [pc, #12]	@ (80013d8 <HAL_IncTick+0x20>)
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	20000010 	.word	0x20000010
 80013d8:	20000380 	.word	0x20000380

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	@ (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	0018      	movs	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	20000380 	.word	0x20000380

080013f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f8:	f7ff fff0 	bl	80013dc <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	d005      	beq.n	8001416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140a:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <HAL_Delay+0x44>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	001a      	movs	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	189b      	adds	r3, r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	f7ff ffe0 	bl	80013dc <HAL_GetTick>
 800141c:	0002      	movs	r2, r0
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	429a      	cmp	r2, r3
 8001426:	d8f7      	bhi.n	8001418 <HAL_Delay+0x28>
  {
  }
}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46c0      	nop			@ (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b004      	add	sp, #16
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			@ (mov r8, r8)
 8001434:	20000010 	.word	0x20000010

08001438 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e159      	b.n	80016fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10a      	bne.n	8001468 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2250      	movs	r2, #80	@ 0x50
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff fb9a 	bl	8000b9c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800146c:	2210      	movs	r2, #16
 800146e:	4013      	ands	r3, r2
 8001470:	2b10      	cmp	r3, #16
 8001472:	d005      	beq.n	8001480 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2204      	movs	r2, #4
 800147c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800147e:	d00b      	beq.n	8001498 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001484:	2210      	movs	r2, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2250      	movs	r2, #80	@ 0x50
 8001490:	2100      	movs	r1, #0
 8001492:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e132      	b.n	80016fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	4a9a      	ldr	r2, [pc, #616]	@ (8001708 <HAL_ADC_Init+0x2d0>)
 800149e:	4013      	ands	r3, r2
 80014a0:	2202      	movs	r2, #2
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2203      	movs	r2, #3
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d108      	bne.n	80014c8 <HAL_ADC_Init+0x90>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <HAL_ADC_Init+0x90>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_ADC_Init+0x92>
 80014c8:	2300      	movs	r3, #0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d149      	bne.n	8001562 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	23c0      	movs	r3, #192	@ 0xc0
 80014d4:	061b      	lsls	r3, r3, #24
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d00b      	beq.n	80014f2 <HAL_ADC_Init+0xba>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	2380      	movs	r3, #128	@ 0x80
 80014e0:	05db      	lsls	r3, r3, #23
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d005      	beq.n	80014f2 <HAL_ADC_Init+0xba>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	2380      	movs	r3, #128	@ 0x80
 80014ec:	061b      	lsls	r3, r3, #24
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d111      	bne.n	8001516 <HAL_ADC_Init+0xde>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	0092      	lsls	r2, r2, #2
 80014fe:	0892      	lsrs	r2, r2, #2
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	6919      	ldr	r1, [r3, #16]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	e014      	b.n	8001540 <HAL_ADC_Init+0x108>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	691a      	ldr	r2, [r3, #16]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	0092      	lsls	r2, r2, #2
 8001522:	0892      	lsrs	r2, r2, #2
 8001524:	611a      	str	r2, [r3, #16]
 8001526:	4b79      	ldr	r3, [pc, #484]	@ (800170c <HAL_ADC_Init+0x2d4>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	4b78      	ldr	r3, [pc, #480]	@ (800170c <HAL_ADC_Init+0x2d4>)
 800152c:	4978      	ldr	r1, [pc, #480]	@ (8001710 <HAL_ADC_Init+0x2d8>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	4b76      	ldr	r3, [pc, #472]	@ (800170c <HAL_ADC_Init+0x2d4>)
 8001534:	6819      	ldr	r1, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4b74      	ldr	r3, [pc, #464]	@ (800170c <HAL_ADC_Init+0x2d4>)
 800153c:	430a      	orrs	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	68da      	ldr	r2, [r3, #12]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2118      	movs	r1, #24
 800154c:	438a      	bics	r2, r1
 800154e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68d9      	ldr	r1, [r3, #12]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001562:	4b6a      	ldr	r3, [pc, #424]	@ (800170c <HAL_ADC_Init+0x2d4>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b69      	ldr	r3, [pc, #420]	@ (800170c <HAL_ADC_Init+0x2d4>)
 8001568:	496a      	ldr	r1, [pc, #424]	@ (8001714 <HAL_ADC_Init+0x2dc>)
 800156a:	400a      	ands	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800156e:	4b67      	ldr	r3, [pc, #412]	@ (800170c <HAL_ADC_Init+0x2d4>)
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001576:	065a      	lsls	r2, r3, #25
 8001578:	4b64      	ldr	r3, [pc, #400]	@ (800170c <HAL_ADC_Init+0x2d4>)
 800157a:	430a      	orrs	r2, r1
 800157c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	055b      	lsls	r3, r3, #21
 8001588:	4013      	ands	r3, r2
 800158a:	d108      	bne.n	800159e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689a      	ldr	r2, [r3, #8]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	0549      	lsls	r1, r1, #21
 800159a:	430a      	orrs	r2, r1
 800159c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68da      	ldr	r2, [r3, #12]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	495b      	ldr	r1, [pc, #364]	@ (8001718 <HAL_ADC_Init+0x2e0>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68d9      	ldr	r1, [r3, #12]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_Init+0x18c>
 80015c0:	2304      	movs	r3, #4
 80015c2:	e000      	b.n	80015c6 <HAL_ADC_Init+0x18e>
 80015c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80015c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2020      	movs	r0, #32
 80015cc:	5c1b      	ldrb	r3, [r3, r0]
 80015ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80015d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	202c      	movs	r0, #44	@ 0x2c
 80015d6:	5c1b      	ldrb	r3, [r3, r0]
 80015d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80015da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80015e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80015e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80015f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015fe:	23c2      	movs	r3, #194	@ 0xc2
 8001600:	33ff      	adds	r3, #255	@ 0xff
 8001602:	429a      	cmp	r2, r3
 8001604:	d00b      	beq.n	800161e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	68d9      	ldr	r1, [r3, #12]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2221      	movs	r2, #33	@ 0x21
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d11a      	bne.n	800165e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2220      	movs	r2, #32
 800162c:	5c9b      	ldrb	r3, [r3, r2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d109      	bne.n	8001646 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2180      	movs	r1, #128	@ 0x80
 800163e:	0249      	lsls	r1, r1, #9
 8001640:	430a      	orrs	r2, r1
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	e00b      	b.n	800165e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800164a:	2220      	movs	r2, #32
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	2201      	movs	r2, #1
 8001658:	431a      	orrs	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001662:	2b01      	cmp	r3, #1
 8001664:	d11f      	bne.n	80016a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	492a      	ldr	r1, [pc, #168]	@ (800171c <HAL_ADC_Init+0x2e4>)
 8001672:	400a      	ands	r2, r1
 8001674:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6919      	ldr	r1, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001684:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800168a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2101      	movs	r1, #1
 80016a0:	430a      	orrs	r2, r1
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	e00e      	b.n	80016c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2201      	movs	r2, #1
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d107      	bne.n	80016c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2107      	movs	r1, #7
 80016d0:	438a      	bics	r2, r1
 80016d2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6959      	ldr	r1, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016f0:	2203      	movs	r2, #3
 80016f2:	4393      	bics	r3, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	0018      	movs	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	b002      	add	sp, #8
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	fffffefd 	.word	0xfffffefd
 800170c:	40012708 	.word	0x40012708
 8001710:	ffc3ffff 	.word	0xffc3ffff
 8001714:	fdffffff 	.word	0xfdffffff
 8001718:	fffe0219 	.word	0xfffe0219
 800171c:	fffffc03 	.word	0xfffffc03

08001720 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001720:	b590      	push	{r4, r7, lr}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001728:	230f      	movs	r3, #15
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	2200      	movs	r2, #0
 800172e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2204      	movs	r2, #4
 8001738:	4013      	ands	r3, r2
 800173a:	d138      	bne.n	80017ae <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2250      	movs	r2, #80	@ 0x50
 8001740:	5c9b      	ldrb	r3, [r3, r2]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d101      	bne.n	800174a <HAL_ADC_Start+0x2a>
 8001746:	2302      	movs	r3, #2
 8001748:	e038      	b.n	80017bc <HAL_ADC_Start+0x9c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2250      	movs	r2, #80	@ 0x50
 800174e:	2101      	movs	r1, #1
 8001750:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d007      	beq.n	800176a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800175a:	230f      	movs	r3, #15
 800175c:	18fc      	adds	r4, r7, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	0018      	movs	r0, r3
 8001762:	f000 f979 	bl	8001a58 <ADC_Enable>
 8001766:	0003      	movs	r3, r0
 8001768:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800176a:	230f      	movs	r3, #15
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d120      	bne.n	80017b6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <HAL_ADC_Start+0xa4>)
 800177a:	4013      	ands	r3, r2
 800177c:	2280      	movs	r2, #128	@ 0x80
 800177e:	0052      	lsls	r2, r2, #1
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2250      	movs	r2, #80	@ 0x50
 8001790:	2100      	movs	r1, #0
 8001792:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	221c      	movs	r2, #28
 800179a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2104      	movs	r1, #4
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e003      	b.n	80017b6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017ae:	230f      	movs	r3, #15
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b6:	230f      	movs	r3, #15
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	781b      	ldrb	r3, [r3, #0]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b005      	add	sp, #20
 80017c2:	bd90      	pop	{r4, r7, pc}
 80017c4:	fffff0fe 	.word	0xfffff0fe

080017c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d102      	bne.n	80017e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80017e2:	2308      	movs	r3, #8
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	e014      	b.n	8001812 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	2201      	movs	r2, #1
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10b      	bne.n	800180e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fa:	2220      	movs	r2, #32
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2250      	movs	r2, #80	@ 0x50
 8001806:	2100      	movs	r1, #0
 8001808:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e072      	b.n	80018f4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800180e:	230c      	movs	r3, #12
 8001810:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001812:	f7ff fde3 	bl	80013dc <HAL_GetTick>
 8001816:	0003      	movs	r3, r0
 8001818:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800181a:	e01f      	b.n	800185c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	d01c      	beq.n	800185c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_ADC_PollForConversion+0x70>
 8001828:	f7ff fdd8 	bl	80013dc <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d211      	bcs.n	800185c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	4013      	ands	r3, r2
 8001842:	d10b      	bne.n	800185c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001848:	2204      	movs	r2, #4
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2250      	movs	r2, #80	@ 0x50
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e04b      	b.n	80018f4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	d0d9      	beq.n	800181c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800186c:	2280      	movs	r2, #128	@ 0x80
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	23c0      	movs	r3, #192	@ 0xc0
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4013      	ands	r3, r2
 8001882:	d12e      	bne.n	80018e2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800188a:	2b00      	cmp	r3, #0
 800188c:	d129      	bne.n	80018e2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2208      	movs	r2, #8
 8001896:	4013      	ands	r3, r2
 8001898:	2b08      	cmp	r3, #8
 800189a:	d122      	bne.n	80018e2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d110      	bne.n	80018ca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	210c      	movs	r1, #12
 80018b4:	438a      	bics	r2, r1
 80018b6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018bc:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <HAL_ADC_PollForConversion+0x134>)
 80018be:	4013      	ands	r3, r2
 80018c0:	2201      	movs	r2, #1
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80018c8:	e00b      	b.n	80018e2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ce:	2220      	movs	r2, #32
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	2201      	movs	r2, #1
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d103      	bne.n	80018f2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	fffffefe 	.word	0xfffffefe

08001900 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800190e:	0018      	movs	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
	...

08001918 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2250      	movs	r2, #80	@ 0x50
 8001926:	5c9b      	ldrb	r3, [r3, r2]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x18>
 800192c:	2302      	movs	r3, #2
 800192e:	e085      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x124>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2250      	movs	r2, #80	@ 0x50
 8001934:	2101      	movs	r1, #1
 8001936:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d00b      	beq.n	800195c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001948:	2220      	movs	r2, #32
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2250      	movs	r2, #80	@ 0x50
 8001954:	2100      	movs	r1, #0
 8001956:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e06f      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a38      	ldr	r2, [pc, #224]	@ (8001a44 <HAL_ADC_ConfigChannel+0x12c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d035      	beq.n	80019d2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	035b      	lsls	r3, r3, #13
 8001972:	0b5a      	lsrs	r2, r3, #13
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	02db      	lsls	r3, r3, #11
 8001984:	4013      	ands	r3, r2
 8001986:	d009      	beq.n	800199c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001988:	4b2f      	ldr	r3, [pc, #188]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 800198e:	2180      	movs	r1, #128	@ 0x80
 8001990:	0409      	lsls	r1, r1, #16
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001996:	200a      	movs	r0, #10
 8001998:	f000 f8c6 	bl	8001b28 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	029b      	lsls	r3, r3, #10
 80019a4:	4013      	ands	r3, r2
 80019a6:	d006      	beq.n	80019b6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80019a8:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b26      	ldr	r3, [pc, #152]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 80019ae:	2180      	movs	r1, #128	@ 0x80
 80019b0:	03c9      	lsls	r1, r1, #15
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	@ 0x80
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	4013      	ands	r3, r2
 80019c0:	d037      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80019c2:	4b21      	ldr	r3, [pc, #132]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0449      	lsls	r1, r1, #17
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	e02f      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	035b      	lsls	r3, r3, #13
 80019de:	0b5b      	lsrs	r3, r3, #13
 80019e0:	43d9      	mvns	r1, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	400a      	ands	r2, r1
 80019e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	02db      	lsls	r3, r3, #11
 80019f2:	4013      	ands	r3, r2
 80019f4:	d005      	beq.n	8001a02 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80019f6:	4b14      	ldr	r3, [pc, #80]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 80019fc:	4913      	ldr	r1, [pc, #76]	@ (8001a4c <HAL_ADC_ConfigChannel+0x134>)
 80019fe:	400a      	ands	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2380      	movs	r3, #128	@ 0x80
 8001a08:	029b      	lsls	r3, r3, #10
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	d005      	beq.n	8001a1a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b0d      	ldr	r3, [pc, #52]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 8001a14:	490e      	ldr	r1, [pc, #56]	@ (8001a50 <HAL_ADC_ConfigChannel+0x138>)
 8001a16:	400a      	ands	r2, r1
 8001a18:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	@ 0x80
 8001a20:	025b      	lsls	r3, r3, #9
 8001a22:	4013      	ands	r3, r2
 8001a24:	d005      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8001a26:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_ADC_ConfigChannel+0x130>)
 8001a2c:	4909      	ldr	r1, [pc, #36]	@ (8001a54 <HAL_ADC_ConfigChannel+0x13c>)
 8001a2e:	400a      	ands	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2250      	movs	r2, #80	@ 0x50
 8001a36:	2100      	movs	r1, #0
 8001a38:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	00001001 	.word	0x00001001
 8001a48:	40012708 	.word	0x40012708
 8001a4c:	ff7fffff 	.word	0xff7fffff
 8001a50:	ffbfffff 	.word	0xffbfffff
 8001a54:	feffffff 	.word	0xfeffffff

08001a58 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <ADC_Enable+0x2c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d101      	bne.n	8001a84 <ADC_Enable+0x2c>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <ADC_Enable+0x2e>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d146      	bne.n	8001b18 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <ADC_Enable+0xcc>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	d00d      	beq.n	8001ab2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e033      	b.n	8001b1a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2101      	movs	r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f000 f830 	bl	8001b28 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff fc88 	bl	80013dc <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ad0:	e01b      	b.n	8001b0a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ad2:	f7ff fc83 	bl	80013dc <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b0a      	cmp	r3, #10
 8001ade:	d914      	bls.n	8001b0a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d00d      	beq.n	8001b0a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af2:	2210      	movs	r2, #16
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afe:	2201      	movs	r2, #1
 8001b00:	431a      	orrs	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e007      	b.n	8001b1a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d1dc      	bne.n	8001ad2 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b004      	add	sp, #16
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			@ (mov r8, r8)
 8001b24:	80000017 	.word	0x80000017

08001b28 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <ADC_DelayMicroSecond+0x38>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	490b      	ldr	r1, [pc, #44]	@ (8001b64 <ADC_DelayMicroSecond+0x3c>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7fe faf0 	bl	800011c <__udivsi3>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	001a      	movs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4353      	muls	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8001b46:	e002      	b.n	8001b4e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f9      	bne.n	8001b48 <ADC_DelayMicroSecond+0x20>
  }
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b004      	add	sp, #16
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	20000000 	.word	0x20000000
 8001b64:	000f4240 	.word	0x000f4240

08001b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	0002      	movs	r2, r0
 8001b70:	1dfb      	adds	r3, r7, #7
 8001b72:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b7a:	d809      	bhi.n	8001b90 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	001a      	movs	r2, r3
 8001b82:	231f      	movs	r3, #31
 8001b84:	401a      	ands	r2, r3
 8001b86:	4b04      	ldr	r3, [pc, #16]	@ (8001b98 <__NVIC_EnableIRQ+0x30>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4091      	lsls	r1, r2
 8001b8c:	000a      	movs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]
  }
}
 8001b90:	46c0      	nop			@ (mov r8, r8)
 8001b92:	46bd      	mov	sp, r7
 8001b94:	b002      	add	sp, #8
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	e000e100 	.word	0xe000e100

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001baa:	1dfb      	adds	r3, r7, #7
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bb0:	d828      	bhi.n	8001c04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb2:	4a2f      	ldr	r2, [pc, #188]	@ (8001c70 <__NVIC_SetPriority+0xd4>)
 8001bb4:	1dfb      	adds	r3, r7, #7
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	b25b      	sxtb	r3, r3
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	33c0      	adds	r3, #192	@ 0xc0
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	589b      	ldr	r3, [r3, r2]
 8001bc2:	1dfa      	adds	r2, r7, #7
 8001bc4:	7812      	ldrb	r2, [r2, #0]
 8001bc6:	0011      	movs	r1, r2
 8001bc8:	2203      	movs	r2, #3
 8001bca:	400a      	ands	r2, r1
 8001bcc:	00d2      	lsls	r2, r2, #3
 8001bce:	21ff      	movs	r1, #255	@ 0xff
 8001bd0:	4091      	lsls	r1, r2
 8001bd2:	000a      	movs	r2, r1
 8001bd4:	43d2      	mvns	r2, r2
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	019b      	lsls	r3, r3, #6
 8001bde:	22ff      	movs	r2, #255	@ 0xff
 8001be0:	401a      	ands	r2, r3
 8001be2:	1dfb      	adds	r3, r7, #7
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	0018      	movs	r0, r3
 8001be8:	2303      	movs	r3, #3
 8001bea:	4003      	ands	r3, r0
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bf0:	481f      	ldr	r0, [pc, #124]	@ (8001c70 <__NVIC_SetPriority+0xd4>)
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b25b      	sxtb	r3, r3
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	33c0      	adds	r3, #192	@ 0xc0
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c02:	e031      	b.n	8001c68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c04:	4a1b      	ldr	r2, [pc, #108]	@ (8001c74 <__NVIC_SetPriority+0xd8>)
 8001c06:	1dfb      	adds	r3, r7, #7
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	400b      	ands	r3, r1
 8001c10:	3b08      	subs	r3, #8
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3306      	adds	r3, #6
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1dfa      	adds	r2, r7, #7
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	0011      	movs	r1, r2
 8001c24:	2203      	movs	r2, #3
 8001c26:	400a      	ands	r2, r1
 8001c28:	00d2      	lsls	r2, r2, #3
 8001c2a:	21ff      	movs	r1, #255	@ 0xff
 8001c2c:	4091      	lsls	r1, r2
 8001c2e:	000a      	movs	r2, r1
 8001c30:	43d2      	mvns	r2, r2
 8001c32:	401a      	ands	r2, r3
 8001c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	019b      	lsls	r3, r3, #6
 8001c3a:	22ff      	movs	r2, #255	@ 0xff
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	1dfb      	adds	r3, r7, #7
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	0018      	movs	r0, r3
 8001c44:	2303      	movs	r3, #3
 8001c46:	4003      	ands	r3, r0
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c4c:	4809      	ldr	r0, [pc, #36]	@ (8001c74 <__NVIC_SetPriority+0xd8>)
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	001c      	movs	r4, r3
 8001c54:	230f      	movs	r3, #15
 8001c56:	4023      	ands	r3, r4
 8001c58:	3b08      	subs	r3, #8
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	3306      	adds	r3, #6
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	18c3      	adds	r3, r0, r3
 8001c64:	3304      	adds	r3, #4
 8001c66:	601a      	str	r2, [r3, #0]
}
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b003      	add	sp, #12
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	e000e100 	.word	0xe000e100
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	1e5a      	subs	r2, r3, #1
 8001c84:	2380      	movs	r3, #128	@ 0x80
 8001c86:	045b      	lsls	r3, r3, #17
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d301      	bcc.n	8001c90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e010      	b.n	8001cb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <SysTick_Config+0x44>)
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	3a01      	subs	r2, #1
 8001c96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c98:	2301      	movs	r3, #1
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	2103      	movs	r1, #3
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f7ff ff7c 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <SysTick_Config+0x44>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SysTick_Config+0x44>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	210f      	movs	r1, #15
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	1c02      	adds	r2, r0, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b25b      	sxtb	r3, r3
 8001cda:	0011      	movs	r1, r2
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ff5d 	bl	8001b9c <__NVIC_SetPriority>
}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b004      	add	sp, #16
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	1dfb      	adds	r3, r7, #7
 8001cf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b25b      	sxtb	r3, r3
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f7ff ff33 	bl	8001b68 <__NVIC_EnableIRQ>
}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f7ff ffaf 	bl	8001c78 <SysTick_Config>
 8001d1a:	0003      	movs	r3, r0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d3a:	e14f      	b.n	8001fdc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2101      	movs	r1, #1
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4091      	lsls	r1, r2
 8001d46:	000a      	movs	r2, r1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d100      	bne.n	8001d54 <HAL_GPIO_Init+0x30>
 8001d52:	e140      	b.n	8001fd6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2203      	movs	r2, #3
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d005      	beq.n	8001d6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2203      	movs	r2, #3
 8001d66:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d130      	bne.n	8001dce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	409a      	lsls	r2, r3
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	43da      	mvns	r2, r3
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	0013      	movs	r3, r2
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da2:	2201      	movs	r2, #1
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	091b      	lsrs	r3, r3, #4
 8001db8:	2201      	movs	r2, #1
 8001dba:	401a      	ands	r2, r3
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	0013      	movs	r3, r2
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d017      	beq.n	8001e0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	2203      	movs	r2, #3
 8001de6:	409a      	lsls	r2, r3
 8001de8:	0013      	movs	r3, r2
 8001dea:	43da      	mvns	r2, r3
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	0013      	movs	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2203      	movs	r2, #3
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d123      	bne.n	8001e5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	08da      	lsrs	r2, r3, #3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3208      	adds	r2, #8
 8001e1e:	0092      	lsls	r2, r2, #2
 8001e20:	58d3      	ldr	r3, [r2, r3]
 8001e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2207      	movs	r2, #7
 8001e28:	4013      	ands	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	409a      	lsls	r2, r3
 8001e30:	0013      	movs	r3, r2
 8001e32:	43da      	mvns	r2, r3
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2107      	movs	r1, #7
 8001e42:	400b      	ands	r3, r1
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	409a      	lsls	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	6939      	ldr	r1, [r7, #16]
 8001e5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	2203      	movs	r2, #3
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	0013      	movs	r3, r2
 8001e6e:	43da      	mvns	r2, r3
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4013      	ands	r3, r2
 8001e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	409a      	lsls	r2, r3
 8001e84:	0013      	movs	r3, r2
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	23c0      	movs	r3, #192	@ 0xc0
 8001e98:	029b      	lsls	r3, r3, #10
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d100      	bne.n	8001ea0 <HAL_GPIO_Init+0x17c>
 8001e9e:	e09a      	b.n	8001fd6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea0:	4b54      	ldr	r3, [pc, #336]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eac:	4a52      	ldr	r2, [pc, #328]	@ (8001ff8 <HAL_GPIO_Init+0x2d4>)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	589b      	ldr	r3, [r3, r2]
 8001eb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	409a      	lsls	r2, r3
 8001ec6:	0013      	movs	r3, r2
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	23a0      	movs	r3, #160	@ 0xa0
 8001ed4:	05db      	lsls	r3, r3, #23
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d019      	beq.n	8001f0e <HAL_GPIO_Init+0x1ea>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a47      	ldr	r2, [pc, #284]	@ (8001ffc <HAL_GPIO_Init+0x2d8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d013      	beq.n	8001f0a <HAL_GPIO_Init+0x1e6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a46      	ldr	r2, [pc, #280]	@ (8002000 <HAL_GPIO_Init+0x2dc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00d      	beq.n	8001f06 <HAL_GPIO_Init+0x1e2>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a45      	ldr	r2, [pc, #276]	@ (8002004 <HAL_GPIO_Init+0x2e0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d007      	beq.n	8001f02 <HAL_GPIO_Init+0x1de>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a44      	ldr	r2, [pc, #272]	@ (8002008 <HAL_GPIO_Init+0x2e4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_GPIO_Init+0x1da>
 8001efa:	2305      	movs	r3, #5
 8001efc:	e008      	b.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001efe:	2306      	movs	r3, #6
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001f02:	2303      	movs	r3, #3
 8001f04:	e004      	b.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e002      	b.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	2103      	movs	r1, #3
 8001f14:	400a      	ands	r2, r1
 8001f16:	0092      	lsls	r2, r2, #2
 8001f18:	4093      	lsls	r3, r2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f20:	4935      	ldr	r1, [pc, #212]	@ (8001ff8 <HAL_GPIO_Init+0x2d4>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	3302      	adds	r3, #2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f2e:	4b37      	ldr	r3, [pc, #220]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43da      	mvns	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	2380      	movs	r3, #128	@ 0x80
 8001f44:	035b      	lsls	r3, r3, #13
 8001f46:	4013      	ands	r3, r2
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f52:	4b2e      	ldr	r3, [pc, #184]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f58:	4b2c      	ldr	r3, [pc, #176]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	43da      	mvns	r2, r3
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2380      	movs	r3, #128	@ 0x80
 8001f6e:	039b      	lsls	r3, r3, #14
 8001f70:	4013      	ands	r3, r2
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f7c:	4b23      	ldr	r3, [pc, #140]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f82:	4b22      	ldr	r3, [pc, #136]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	43da      	mvns	r2, r3
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	2380      	movs	r3, #128	@ 0x80
 8001f98:	029b      	lsls	r3, r3, #10
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fa6:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	43da      	mvns	r2, r3
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	025b      	lsls	r3, r3, #9
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800200c <HAL_GPIO_Init+0x2e8>)
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	40da      	lsrs	r2, r3
 8001fe4:	1e13      	subs	r3, r2, #0
 8001fe6:	d000      	beq.n	8001fea <HAL_GPIO_Init+0x2c6>
 8001fe8:	e6a8      	b.n	8001d3c <HAL_GPIO_Init+0x18>
  }
}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b006      	add	sp, #24
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	50000400 	.word	0x50000400
 8002000:	50000800 	.word	0x50000800
 8002004:	50000c00 	.word	0x50000c00
 8002008:	50001c00 	.word	0x50001c00
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	000a      	movs	r2, r1
 800201a:	1cbb      	adds	r3, r7, #2
 800201c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	691b      	ldr	r3, [r3, #16]
 8002022:	1cba      	adds	r2, r7, #2
 8002024:	8812      	ldrh	r2, [r2, #0]
 8002026:	4013      	ands	r3, r2
 8002028:	d004      	beq.n	8002034 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800202a:	230f      	movs	r3, #15
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
 8002032:	e003      	b.n	800203c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002034:	230f      	movs	r3, #15
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800203c:	230f      	movs	r3, #15
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	0002      	movs	r2, r0
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002058:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800205a:	695b      	ldr	r3, [r3, #20]
 800205c:	1dba      	adds	r2, r7, #6
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	4013      	ands	r3, r2
 8002062:	d008      	beq.n	8002076 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002066:	1dba      	adds	r2, r7, #6
 8002068:	8812      	ldrh	r2, [r2, #0]
 800206a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800206c:	1dbb      	adds	r3, r7, #6
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 f807 	bl	8002084 <HAL_GPIO_EXTI_Callback>
  }
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	0002      	movs	r2, r0
 800208c:	1dbb      	adds	r3, r7, #6
 800208e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002090:	46c0      	nop			@ (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e082      	b.n	80021b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2241      	movs	r2, #65	@ 0x41
 80020ae:	5c9b      	ldrb	r3, [r3, r2]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2240      	movs	r2, #64	@ 0x40
 80020ba:	2100      	movs	r1, #0
 80020bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f7fe fda9 	bl	8000c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	@ 0x41
 80020ca:	2124      	movs	r1, #36	@ 0x24
 80020cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	438a      	bics	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4934      	ldr	r1, [pc, #208]	@ (80021b8 <HAL_I2C_Init+0x120>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4931      	ldr	r1, [pc, #196]	@ (80021bc <HAL_I2C_Init+0x124>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d108      	bne.n	8002116 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2180      	movs	r1, #128	@ 0x80
 800210e:	0209      	lsls	r1, r1, #8
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e007      	b.n	8002126 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2184      	movs	r1, #132	@ 0x84
 8002120:	0209      	lsls	r1, r1, #8
 8002122:	430a      	orrs	r2, r1
 8002124:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d104      	bne.n	8002138 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2280      	movs	r2, #128	@ 0x80
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	491f      	ldr	r1, [pc, #124]	@ (80021c0 <HAL_I2C_Init+0x128>)
 8002144:	430a      	orrs	r2, r1
 8002146:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	491a      	ldr	r1, [pc, #104]	@ (80021bc <HAL_I2C_Init+0x124>)
 8002154:	400a      	ands	r2, r1
 8002156:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	431a      	orrs	r2, r3
 8002162:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69d9      	ldr	r1, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2241      	movs	r2, #65	@ 0x41
 800219c:	2120      	movs	r1, #32
 800219e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2242      	movs	r2, #66	@ 0x42
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	0018      	movs	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b002      	add	sp, #8
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	f0ffffff 	.word	0xf0ffffff
 80021bc:	ffff7fff 	.word	0xffff7fff
 80021c0:	02008000 	.word	0x02008000

080021c4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	000c      	movs	r4, r1
 80021ce:	0010      	movs	r0, r2
 80021d0:	0019      	movs	r1, r3
 80021d2:	230a      	movs	r3, #10
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	1c22      	adds	r2, r4, #0
 80021d8:	801a      	strh	r2, [r3, #0]
 80021da:	2308      	movs	r3, #8
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	1c02      	adds	r2, r0, #0
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	1dbb      	adds	r3, r7, #6
 80021e4:	1c0a      	adds	r2, r1, #0
 80021e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2241      	movs	r2, #65	@ 0x41
 80021ec:	5c9b      	ldrb	r3, [r3, r2]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d000      	beq.n	80021f6 <HAL_I2C_Mem_Write+0x32>
 80021f4:	e10c      	b.n	8002410 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d004      	beq.n	8002206 <HAL_I2C_Mem_Write+0x42>
 80021fc:	232c      	movs	r3, #44	@ 0x2c
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	881b      	ldrh	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d105      	bne.n	8002212 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2280      	movs	r2, #128	@ 0x80
 800220a:	0092      	lsls	r2, r2, #2
 800220c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e0ff      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2240      	movs	r2, #64	@ 0x40
 8002216:	5c9b      	ldrb	r3, [r3, r2]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d101      	bne.n	8002220 <HAL_I2C_Mem_Write+0x5c>
 800221c:	2302      	movs	r3, #2
 800221e:	e0f8      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2240      	movs	r2, #64	@ 0x40
 8002224:	2101      	movs	r1, #1
 8002226:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002228:	f7ff f8d8 	bl	80013dc <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	0219      	lsls	r1, r3, #8
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2319      	movs	r3, #25
 800223c:	2201      	movs	r2, #1
 800223e:	f000 f975 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002242:	1e03      	subs	r3, r0, #0
 8002244:	d001      	beq.n	800224a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0e3      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2241      	movs	r2, #65	@ 0x41
 800224e:	2121      	movs	r1, #33	@ 0x21
 8002250:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2242      	movs	r2, #66	@ 0x42
 8002256:	2140      	movs	r1, #64	@ 0x40
 8002258:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002264:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	222c      	movs	r2, #44	@ 0x2c
 800226a:	18ba      	adds	r2, r7, r2
 800226c:	8812      	ldrh	r2, [r2, #0]
 800226e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002276:	1dbb      	adds	r3, r7, #6
 8002278:	881c      	ldrh	r4, [r3, #0]
 800227a:	2308      	movs	r3, #8
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	881a      	ldrh	r2, [r3, #0]
 8002280:	230a      	movs	r3, #10
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	8819      	ldrh	r1, [r3, #0]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	9301      	str	r3, [sp, #4]
 800228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	0023      	movs	r3, r4
 8002292:	f000 f8c5 	bl	8002420 <I2C_RequestMemoryWrite>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d005      	beq.n	80022a6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2240      	movs	r2, #64	@ 0x40
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0b5      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2bff      	cmp	r3, #255	@ 0xff
 80022ae:	d911      	bls.n	80022d4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	22ff      	movs	r2, #255	@ 0xff
 80022b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	2380      	movs	r3, #128	@ 0x80
 80022be:	045c      	lsls	r4, r3, #17
 80022c0:	230a      	movs	r3, #10
 80022c2:	18fb      	adds	r3, r7, r3
 80022c4:	8819      	ldrh	r1, [r3, #0]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	2300      	movs	r3, #0
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	0023      	movs	r3, r4
 80022ce:	f000 fafd 	bl	80028cc <I2C_TransferConfig>
 80022d2:	e012      	b.n	80022fa <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	049c      	lsls	r4, r3, #18
 80022e8:	230a      	movs	r3, #10
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	8819      	ldrh	r1, [r3, #0]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	2300      	movs	r3, #0
 80022f2:	9300      	str	r3, [sp, #0]
 80022f4:	0023      	movs	r3, r4
 80022f6:	f000 fae9 	bl	80028cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f961 	bl	80025c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002306:	1e03      	subs	r3, r0, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e081      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03a      	beq.n	80023be <HAL_I2C_Mem_Write+0x1fa>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d136      	bne.n	80023be <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	0013      	movs	r3, r2
 800235a:	2200      	movs	r2, #0
 800235c:	2180      	movs	r1, #128	@ 0x80
 800235e:	f000 f8e5 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 8002362:	1e03      	subs	r3, r0, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e053      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2bff      	cmp	r3, #255	@ 0xff
 8002372:	d911      	bls.n	8002398 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	b2da      	uxtb	r2, r3
 8002380:	2380      	movs	r3, #128	@ 0x80
 8002382:	045c      	lsls	r4, r3, #17
 8002384:	230a      	movs	r3, #10
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	8819      	ldrh	r1, [r3, #0]
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	0023      	movs	r3, r4
 8002392:	f000 fa9b 	bl	80028cc <I2C_TransferConfig>
 8002396:	e012      	b.n	80023be <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	2380      	movs	r3, #128	@ 0x80
 80023aa:	049c      	lsls	r4, r3, #18
 80023ac:	230a      	movs	r3, #10
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	8819      	ldrh	r1, [r3, #0]
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	2300      	movs	r3, #0
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	0023      	movs	r3, r4
 80023ba:	f000 fa87 	bl	80028cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d198      	bne.n	80022fa <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f940 	bl	8002654 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e01a      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2220      	movs	r2, #32
 80023e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	490b      	ldr	r1, [pc, #44]	@ (800241c <HAL_I2C_Mem_Write+0x258>)
 80023f0:	400a      	ands	r2, r1
 80023f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2241      	movs	r2, #65	@ 0x41
 80023f8:	2120      	movs	r1, #32
 80023fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2242      	movs	r2, #66	@ 0x42
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	e000      	b.n	8002412 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002410:	2302      	movs	r3, #2
  }
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b007      	add	sp, #28
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	fe00e800 	.word	0xfe00e800

08002420 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002420:	b5b0      	push	{r4, r5, r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	000c      	movs	r4, r1
 800242a:	0010      	movs	r0, r2
 800242c:	0019      	movs	r1, r3
 800242e:	250a      	movs	r5, #10
 8002430:	197b      	adds	r3, r7, r5
 8002432:	1c22      	adds	r2, r4, #0
 8002434:	801a      	strh	r2, [r3, #0]
 8002436:	2308      	movs	r3, #8
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	1c02      	adds	r2, r0, #0
 800243c:	801a      	strh	r2, [r3, #0]
 800243e:	1dbb      	adds	r3, r7, #6
 8002440:	1c0a      	adds	r2, r1, #0
 8002442:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002444:	1dbb      	adds	r3, r7, #6
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	045c      	lsls	r4, r3, #17
 800244e:	197b      	adds	r3, r7, r5
 8002450:	8819      	ldrh	r1, [r3, #0]
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	4b23      	ldr	r3, [pc, #140]	@ (80024e4 <I2C_RequestMemoryWrite+0xc4>)
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	0023      	movs	r3, r4
 800245a:	f000 fa37 	bl	80028cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800245e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002460:	6a39      	ldr	r1, [r7, #32]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	0018      	movs	r0, r3
 8002466:	f000 f8af 	bl	80025c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800246a:	1e03      	subs	r3, r0, #0
 800246c:	d001      	beq.n	8002472 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e033      	b.n	80024da <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002472:	1dbb      	adds	r3, r7, #6
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d107      	bne.n	800248a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800247a:	2308      	movs	r3, #8
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	881b      	ldrh	r3, [r3, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
 8002488:	e019      	b.n	80024be <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800248a:	2308      	movs	r3, #8
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	0a1b      	lsrs	r3, r3, #8
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2da      	uxtb	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800249c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f890 	bl	80025c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80024a8:	1e03      	subs	r3, r0, #0
 80024aa:	d001      	beq.n	80024b0 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e014      	b.n	80024da <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80024b0:	2308      	movs	r3, #8
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	881b      	ldrh	r3, [r3, #0]
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80024be:	6a3a      	ldr	r2, [r7, #32]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	0013      	movs	r3, r2
 80024c8:	2200      	movs	r2, #0
 80024ca:	2180      	movs	r1, #128	@ 0x80
 80024cc:	f000 f82e 	bl	800252c <I2C_WaitOnFlagUntilTimeout>
 80024d0:	1e03      	subs	r3, r0, #0
 80024d2:	d001      	beq.n	80024d8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b004      	add	sp, #16
 80024e0:	bdb0      	pop	{r4, r5, r7, pc}
 80024e2:	46c0      	nop			@ (mov r8, r8)
 80024e4:	80002000 	.word	0x80002000

080024e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2202      	movs	r2, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d103      	bne.n	8002506 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2201      	movs	r2, #1
 800250e:	4013      	ands	r3, r2
 8002510:	2b01      	cmp	r3, #1
 8002512:	d007      	beq.n	8002524 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699a      	ldr	r2, [r3, #24]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2101      	movs	r1, #1
 8002520:	430a      	orrs	r2, r1
 8002522:	619a      	str	r2, [r3, #24]
  }
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800253c:	e030      	b.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	3301      	adds	r3, #1
 8002542:	d02d      	beq.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002544:	f7fe ff4a 	bl	80013dc <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d302      	bcc.n	800255a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d122      	bne.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	4013      	ands	r3, r2
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	425a      	negs	r2, r3
 800256a:	4153      	adcs	r3, r2
 800256c:	b2db      	uxtb	r3, r3
 800256e:	001a      	movs	r2, r3
 8002570:	1dfb      	adds	r3, r7, #7
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d113      	bne.n	80025a0 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257c:	2220      	movs	r2, #32
 800257e:	431a      	orrs	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2241      	movs	r2, #65	@ 0x41
 8002588:	2120      	movs	r1, #32
 800258a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2242      	movs	r2, #66	@ 0x42
 8002590:	2100      	movs	r1, #0
 8002592:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2240      	movs	r2, #64	@ 0x40
 8002598:	2100      	movs	r1, #0
 800259a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e00f      	b.n	80025c0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	425a      	negs	r2, r3
 80025b0:	4153      	adcs	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	001a      	movs	r2, r3
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d0bf      	beq.n	800253e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	0018      	movs	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	b004      	add	sp, #16
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80025d4:	e032      	b.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	0018      	movs	r0, r3
 80025de:	f000 f87d 	bl	80026dc <I2C_IsErrorOccurred>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e030      	b.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	d025      	beq.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025f0:	f7fe fef4 	bl	80013dc <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d302      	bcc.n	8002606 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d11a      	bne.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2202      	movs	r2, #2
 800260e:	4013      	ands	r3, r2
 8002610:	2b02      	cmp	r3, #2
 8002612:	d013      	beq.n	800263c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002618:	2220      	movs	r2, #32
 800261a:	431a      	orrs	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2241      	movs	r2, #65	@ 0x41
 8002624:	2120      	movs	r1, #32
 8002626:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2242      	movs	r2, #66	@ 0x42
 800262c:	2100      	movs	r1, #0
 800262e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2240      	movs	r2, #64	@ 0x40
 8002634:	2100      	movs	r1, #0
 8002636:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e007      	b.n	800264c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	2b02      	cmp	r3, #2
 8002648:	d1c5      	bne.n	80025d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}

08002654 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002660:	e02f      	b.n	80026c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	0018      	movs	r0, r3
 800266a:	f000 f837 	bl	80026dc <I2C_IsErrorOccurred>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d001      	beq.n	8002676 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e02d      	b.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe feb1 	bl	80013dc <HAL_GetTick>
 800267a:	0002      	movs	r2, r0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11a      	bne.n	80026c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2220      	movs	r2, #32
 8002694:	4013      	ands	r3, r2
 8002696:	2b20      	cmp	r3, #32
 8002698:	d013      	beq.n	80026c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	2220      	movs	r2, #32
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2241      	movs	r2, #65	@ 0x41
 80026aa:	2120      	movs	r1, #32
 80026ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2242      	movs	r2, #66	@ 0x42
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2240      	movs	r2, #64	@ 0x40
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e007      	b.n	80026d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	2220      	movs	r2, #32
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d1c8      	bne.n	8002662 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b004      	add	sp, #16
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2327      	movs	r3, #39	@ 0x27
 80026ea:	18fb      	adds	r3, r7, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2210      	movs	r2, #16
 8002704:	4013      	ands	r3, r2
 8002706:	d100      	bne.n	800270a <I2C_IsErrorOccurred+0x2e>
 8002708:	e079      	b.n	80027fe <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2210      	movs	r2, #16
 8002710:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002712:	e057      	b.n	80027c4 <I2C_IsErrorOccurred+0xe8>
 8002714:	2227      	movs	r2, #39	@ 0x27
 8002716:	18bb      	adds	r3, r7, r2
 8002718:	18ba      	adds	r2, r7, r2
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	d04f      	beq.n	80027c4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002724:	f7fe fe5a 	bl	80013dc <HAL_GetTick>
 8002728:	0002      	movs	r2, r0
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d302      	bcc.n	800273a <I2C_IsErrorOccurred+0x5e>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d144      	bne.n	80027c4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	2380      	movs	r3, #128	@ 0x80
 8002742:	01db      	lsls	r3, r3, #7
 8002744:	4013      	ands	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002748:	2013      	movs	r0, #19
 800274a:	183b      	adds	r3, r7, r0
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	2142      	movs	r1, #66	@ 0x42
 8002750:	5c52      	ldrb	r2, [r2, r1]
 8002752:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699a      	ldr	r2, [r3, #24]
 800275a:	2380      	movs	r3, #128	@ 0x80
 800275c:	021b      	lsls	r3, r3, #8
 800275e:	401a      	ands	r2, r3
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	429a      	cmp	r2, r3
 8002766:	d126      	bne.n	80027b6 <I2C_IsErrorOccurred+0xda>
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	2380      	movs	r3, #128	@ 0x80
 800276c:	01db      	lsls	r3, r3, #7
 800276e:	429a      	cmp	r2, r3
 8002770:	d021      	beq.n	80027b6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002772:	183b      	adds	r3, r7, r0
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b20      	cmp	r3, #32
 8002778:	d01d      	beq.n	80027b6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685a      	ldr	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2180      	movs	r1, #128	@ 0x80
 8002786:	01c9      	lsls	r1, r1, #7
 8002788:	430a      	orrs	r2, r1
 800278a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800278c:	f7fe fe26 	bl	80013dc <HAL_GetTick>
 8002790:	0003      	movs	r3, r0
 8002792:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002794:	e00f      	b.n	80027b6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002796:	f7fe fe21 	bl	80013dc <HAL_GetTick>
 800279a:	0002      	movs	r2, r0
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b19      	cmp	r3, #25
 80027a2:	d908      	bls.n	80027b6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	2220      	movs	r2, #32
 80027a8:	4313      	orrs	r3, r2
 80027aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80027ac:	2327      	movs	r3, #39	@ 0x27
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	2201      	movs	r2, #1
 80027b2:	701a      	strb	r2, [r3, #0]

              break;
 80027b4:	e006      	b.n	80027c4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2220      	movs	r2, #32
 80027be:	4013      	ands	r3, r2
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d1e8      	bne.n	8002796 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2220      	movs	r2, #32
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d004      	beq.n	80027dc <I2C_IsErrorOccurred+0x100>
 80027d2:	2327      	movs	r3, #39	@ 0x27
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d09b      	beq.n	8002714 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027dc:	2327      	movs	r3, #39	@ 0x27
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d103      	bne.n	80027ee <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2220      	movs	r2, #32
 80027ec:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027ee:	6a3b      	ldr	r3, [r7, #32]
 80027f0:	2204      	movs	r2, #4
 80027f2:	4313      	orrs	r3, r2
 80027f4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027f6:	2327      	movs	r3, #39	@ 0x27
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d00c      	beq.n	800282a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	2201      	movs	r2, #1
 8002814:	4313      	orrs	r3, r2
 8002816:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2280      	movs	r2, #128	@ 0x80
 800281e:	0052      	lsls	r2, r2, #1
 8002820:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002822:	2327      	movs	r3, #39	@ 0x27
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	4013      	ands	r3, r2
 8002832:	d00c      	beq.n	800284e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	2208      	movs	r2, #8
 8002838:	4313      	orrs	r3, r2
 800283a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2280      	movs	r2, #128	@ 0x80
 8002842:	00d2      	lsls	r2, r2, #3
 8002844:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002846:	2327      	movs	r3, #39	@ 0x27
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	2201      	movs	r2, #1
 800284c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4013      	ands	r3, r2
 8002856:	d00c      	beq.n	8002872 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2202      	movs	r2, #2
 800285c:	4313      	orrs	r3, r2
 800285e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800286a:	2327      	movs	r3, #39	@ 0x27
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002872:	2327      	movs	r3, #39	@ 0x27
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01d      	beq.n	80028b8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	0018      	movs	r0, r3
 8002880:	f7ff fe32 	bl	80024e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	490e      	ldr	r1, [pc, #56]	@ (80028c8 <I2C_IsErrorOccurred+0x1ec>)
 8002890:	400a      	ands	r2, r1
 8002892:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	431a      	orrs	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2241      	movs	r2, #65	@ 0x41
 80028a4:	2120      	movs	r1, #32
 80028a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2242      	movs	r2, #66	@ 0x42
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2240      	movs	r2, #64	@ 0x40
 80028b4:	2100      	movs	r1, #0
 80028b6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80028b8:	2327      	movs	r3, #39	@ 0x27
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	781b      	ldrb	r3, [r3, #0]
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b00a      	add	sp, #40	@ 0x28
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80028cc:	b590      	push	{r4, r7, lr}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	0008      	movs	r0, r1
 80028d6:	0011      	movs	r1, r2
 80028d8:	607b      	str	r3, [r7, #4]
 80028da:	240a      	movs	r4, #10
 80028dc:	193b      	adds	r3, r7, r4
 80028de:	1c02      	adds	r2, r0, #0
 80028e0:	801a      	strh	r2, [r3, #0]
 80028e2:	2009      	movs	r0, #9
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	1c0a      	adds	r2, r1, #0
 80028e8:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ea:	193b      	adds	r3, r7, r4
 80028ec:	881b      	ldrh	r3, [r3, #0]
 80028ee:	059b      	lsls	r3, r3, #22
 80028f0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028f2:	183b      	adds	r3, r7, r0
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	0419      	lsls	r1, r3, #16
 80028f8:	23ff      	movs	r3, #255	@ 0xff
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028fe:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002906:	4313      	orrs	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002916:	0d51      	lsrs	r1, r2, #21
 8002918:	2280      	movs	r2, #128	@ 0x80
 800291a:	00d2      	lsls	r2, r2, #3
 800291c:	400a      	ands	r2, r1
 800291e:	4907      	ldr	r1, [pc, #28]	@ (800293c <I2C_TransferConfig+0x70>)
 8002920:	430a      	orrs	r2, r1
 8002922:	43d2      	mvns	r2, r2
 8002924:	401a      	ands	r2, r3
 8002926:	0011      	movs	r1, r2
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	430a      	orrs	r2, r1
 8002930:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	b007      	add	sp, #28
 8002938:	bd90      	pop	{r4, r7, pc}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	03ff63ff 	.word	0x03ff63ff

08002940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2241      	movs	r2, #65	@ 0x41
 800294e:	5c9b      	ldrb	r3, [r3, r2]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b20      	cmp	r3, #32
 8002954:	d138      	bne.n	80029c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2240      	movs	r2, #64	@ 0x40
 800295a:	5c9b      	ldrb	r3, [r3, r2]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002960:	2302      	movs	r3, #2
 8002962:	e032      	b.n	80029ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	2101      	movs	r1, #1
 800296a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2241      	movs	r2, #65	@ 0x41
 8002970:	2124      	movs	r1, #36	@ 0x24
 8002972:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	438a      	bics	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4911      	ldr	r1, [pc, #68]	@ (80029d4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002990:	400a      	ands	r2, r1
 8002992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6819      	ldr	r1, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2101      	movs	r1, #1
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2241      	movs	r2, #65	@ 0x41
 80029b8:	2120      	movs	r1, #32
 80029ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2240      	movs	r2, #64	@ 0x40
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			@ (mov r8, r8)
 80029d4:	ffffefff 	.word	0xffffefff

080029d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2241      	movs	r2, #65	@ 0x41
 80029e6:	5c9b      	ldrb	r3, [r3, r2]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d139      	bne.n	8002a62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2240      	movs	r2, #64	@ 0x40
 80029f2:	5c9b      	ldrb	r3, [r3, r2]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d101      	bne.n	80029fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029f8:	2302      	movs	r3, #2
 80029fa:	e033      	b.n	8002a64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2240      	movs	r2, #64	@ 0x40
 8002a00:	2101      	movs	r1, #1
 8002a02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2241      	movs	r2, #65	@ 0x41
 8002a08:	2124      	movs	r1, #36	@ 0x24
 8002a0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2101      	movs	r1, #1
 8002a18:	438a      	bics	r2, r1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4a11      	ldr	r2, [pc, #68]	@ (8002a6c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	021b      	lsls	r3, r3, #8
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2241      	movs	r2, #65	@ 0x41
 8002a52:	2120      	movs	r1, #32
 8002a54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2240      	movs	r2, #64	@ 0x40
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	0018      	movs	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b004      	add	sp, #16
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	fffff0ff 	.word	0xfffff0ff

08002a70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d102      	bne.n	8002a84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	f000 fbaf 	bl	80031e2 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a84:	4bcf      	ldr	r3, [pc, #828]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	220c      	movs	r2, #12
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a8e:	4bcd      	ldr	r3, [pc, #820]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002a90:	68da      	ldr	r2, [r3, #12]
 8002a92:	2380      	movs	r3, #128	@ 0x80
 8002a94:	025b      	lsls	r3, r3, #9
 8002a96:	4013      	ands	r3, r2
 8002a98:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x36>
 8002aa4:	e07e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d007      	beq.n	8002abc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d112      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x68>
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	2380      	movs	r3, #128	@ 0x80
 8002ab6:	025b      	lsls	r3, r3, #9
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4bc1      	ldr	r3, [pc, #772]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	@ 0x80
 8002ac2:	029b      	lsls	r3, r3, #10
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x5a>
 8002ac8:	e06b      	b.n	8002ba2 <HAL_RCC_OscConfig+0x132>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d167      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f000 fb85 	bl	80031e2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	2380      	movs	r3, #128	@ 0x80
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_OscConfig+0x84>
 8002ae4:	4bb7      	ldr	r3, [pc, #732]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4bb6      	ldr	r3, [pc, #728]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002aea:	2180      	movs	r1, #128	@ 0x80
 8002aec:	0249      	lsls	r1, r1, #9
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e027      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	23a0      	movs	r3, #160	@ 0xa0
 8002afa:	02db      	lsls	r3, r3, #11
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d10e      	bne.n	8002b1e <HAL_RCC_OscConfig+0xae>
 8002b00:	4bb0      	ldr	r3, [pc, #704]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4baf      	ldr	r3, [pc, #700]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b06:	2180      	movs	r1, #128	@ 0x80
 8002b08:	02c9      	lsls	r1, r1, #11
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4bad      	ldr	r3, [pc, #692]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4bac      	ldr	r3, [pc, #688]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b14:	2180      	movs	r1, #128	@ 0x80
 8002b16:	0249      	lsls	r1, r1, #9
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	e012      	b.n	8002b44 <HAL_RCC_OscConfig+0xd4>
 8002b1e:	4ba9      	ldr	r3, [pc, #676]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4ba8      	ldr	r3, [pc, #672]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b24:	49a8      	ldr	r1, [pc, #672]	@ (8002dc8 <HAL_RCC_OscConfig+0x358>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	4ba6      	ldr	r3, [pc, #664]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	025b      	lsls	r3, r3, #9
 8002b32:	4013      	ands	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4ba2      	ldr	r3, [pc, #648]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4ba1      	ldr	r3, [pc, #644]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b3e:	49a3      	ldr	r1, [pc, #652]	@ (8002dcc <HAL_RCC_OscConfig+0x35c>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fc46 	bl	80013dc <HAL_GetTick>
 8002b50:	0003      	movs	r3, r0
 8002b52:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b54:	e009      	b.n	8002b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b56:	f7fe fc41 	bl	80013dc <HAL_GetTick>
 8002b5a:	0002      	movs	r2, r0
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	@ 0x64
 8002b62:	d902      	bls.n	8002b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	f000 fb3c 	bl	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b6a:	4b96      	ldr	r3, [pc, #600]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	@ 0x80
 8002b70:	029b      	lsls	r3, r3, #10
 8002b72:	4013      	ands	r3, r2
 8002b74:	d0ef      	beq.n	8002b56 <HAL_RCC_OscConfig+0xe6>
 8002b76:	e015      	b.n	8002ba4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fc30 	bl	80013dc <HAL_GetTick>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b80:	e008      	b.n	8002b94 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b82:	f7fe fc2b 	bl	80013dc <HAL_GetTick>
 8002b86:	0002      	movs	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b64      	cmp	r3, #100	@ 0x64
 8002b8e:	d901      	bls.n	8002b94 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e326      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b94:	4b8b      	ldr	r3, [pc, #556]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	2380      	movs	r3, #128	@ 0x80
 8002b9a:	029b      	lsls	r3, r3, #10
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	d1f0      	bne.n	8002b82 <HAL_RCC_OscConfig+0x112>
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	4013      	ands	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x140>
 8002bae:	e08b      	b.n	8002cc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d13e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1d0>
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d13b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002bc8:	4b7e      	ldr	r3, [pc, #504]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCC_OscConfig+0x16c>
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e302      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b79      	ldr	r3, [pc, #484]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a7b      	ldr	r2, [pc, #492]	@ (8002dd0 <HAL_RCC_OscConfig+0x360>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	4b75      	ldr	r3, [pc, #468]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bf2:	4b74      	ldr	r3, [pc, #464]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2209      	movs	r2, #9
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4b71      	ldr	r3, [pc, #452]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c04:	f000 fc40 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8002c08:	0001      	movs	r1, r0
 8002c0a:	4b6e      	ldr	r3, [pc, #440]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	220f      	movs	r2, #15
 8002c12:	4013      	ands	r3, r2
 8002c14:	4a6f      	ldr	r2, [pc, #444]	@ (8002dd4 <HAL_RCC_OscConfig+0x364>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	000a      	movs	r2, r1
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	@ (8002dd8 <HAL_RCC_OscConfig+0x368>)
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c20:	4b6e      	ldr	r3, [pc, #440]	@ (8002ddc <HAL_RCC_OscConfig+0x36c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2513      	movs	r5, #19
 8002c26:	197c      	adds	r4, r7, r5
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fe fb91 	bl	8001350 <HAL_InitTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c32:	197b      	adds	r3, r7, r5
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d046      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002c3a:	197b      	adds	r3, r7, r5
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	e2d0      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d027      	beq.n	8002c96 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c46:	4b5f      	ldr	r3, [pc, #380]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2209      	movs	r2, #9
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	4b5c      	ldr	r3, [pc, #368]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fe fbc0 	bl	80013dc <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe fbbb 	bl	80013dc <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e2b6      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c74:	4b53      	ldr	r3, [pc, #332]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f1      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b51      	ldr	r3, [pc, #324]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a53      	ldr	r2, [pc, #332]	@ (8002dd0 <HAL_RCC_OscConfig+0x360>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b4b      	ldr	r3, [pc, #300]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fb9b 	bl	80013dc <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fe fb96 	bl	80013dc <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e291      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cbe:	4b41      	ldr	r3, [pc, #260]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f1      	bne.n	8002cac <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d100      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x264>
 8002cd2:	e0a1      	b.n	8002e18 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d140      	bne.n	8002d5c <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cda:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	@ 0x80
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x282>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e277      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf2:	4b34      	ldr	r3, [pc, #208]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a3a      	ldr	r2, [pc, #232]	@ (8002de0 <HAL_RCC_OscConfig+0x370>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d00:	4b30      	ldr	r3, [pc, #192]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d06:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	0a19      	lsrs	r1, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	061a      	lsls	r2, r3, #24
 8002d14:	4b2b      	ldr	r3, [pc, #172]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	3301      	adds	r3, #1
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	0212      	lsls	r2, r2, #8
 8002d26:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d28:	4b26      	ldr	r3, [pc, #152]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	210f      	movs	r1, #15
 8002d30:	400b      	ands	r3, r1
 8002d32:	4928      	ldr	r1, [pc, #160]	@ (8002dd4 <HAL_RCC_OscConfig+0x364>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d38:	4b27      	ldr	r3, [pc, #156]	@ (8002dd8 <HAL_RCC_OscConfig+0x368>)
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d3c:	4b27      	ldr	r3, [pc, #156]	@ (8002ddc <HAL_RCC_OscConfig+0x36c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2513      	movs	r5, #19
 8002d42:	197c      	adds	r4, r7, r5
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7fe fb03 	bl	8001350 <HAL_InitTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d060      	beq.n	8002e18 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002d56:	197b      	adds	r3, r7, r5
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	e242      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d03f      	beq.n	8002de4 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d64:	4b17      	ldr	r3, [pc, #92]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b16      	ldr	r3, [pc, #88]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d6a:	2180      	movs	r1, #128	@ 0x80
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fb33 	bl	80013dc <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fb2e 	bl	80013dc <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e229      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	2380      	movs	r3, #128	@ 0x80
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4a10      	ldr	r2, [pc, #64]	@ (8002de0 <HAL_RCC_OscConfig+0x370>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	0019      	movs	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002da8:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dae:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	0a19      	lsrs	r1, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	061a      	lsls	r2, r3, #24
 8002dbc:	4b01      	ldr	r3, [pc, #4]	@ (8002dc4 <HAL_RCC_OscConfig+0x354>)
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e029      	b.n	8002e18 <HAL_RCC_OscConfig+0x3a8>
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	fffeffff 	.word	0xfffeffff
 8002dcc:	fffbffff 	.word	0xfffbffff
 8002dd0:	ffffe0ff 	.word	0xffffe0ff
 8002dd4:	08004704 	.word	0x08004704
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	2000000c 	.word	0x2000000c
 8002de0:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de4:	4bbd      	ldr	r3, [pc, #756]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4bbc      	ldr	r3, [pc, #752]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002dea:	49bd      	ldr	r1, [pc, #756]	@ (80030e0 <HAL_RCC_OscConfig+0x670>)
 8002dec:	400a      	ands	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe faf4 	bl	80013dc <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfa:	f7fe faef 	bl	80013dc <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e1ea      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e0c:	4bb3      	ldr	r3, [pc, #716]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d036      	beq.n	8002e90 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d019      	beq.n	8002e5e <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2a:	4bac      	ldr	r3, [pc, #688]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e2e:	4bab      	ldr	r3, [pc, #684]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	430a      	orrs	r2, r1
 8002e34:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e36:	f7fe fad1 	bl	80013dc <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe facc 	bl	80013dc <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1c7      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e52:	4ba2      	ldr	r3, [pc, #648]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d0f1      	beq.n	8002e40 <HAL_RCC_OscConfig+0x3d0>
 8002e5c:	e018      	b.n	8002e90 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e5e:	4b9f      	ldr	r3, [pc, #636]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e62:	4b9e      	ldr	r3, [pc, #632]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e64:	2101      	movs	r1, #1
 8002e66:	438a      	bics	r2, r1
 8002e68:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6a:	f7fe fab7 	bl	80013dc <HAL_GetTick>
 8002e6e:	0003      	movs	r3, r0
 8002e70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e74:	f7fe fab2 	bl	80013dc <HAL_GetTick>
 8002e78:	0002      	movs	r2, r0
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e1ad      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e86:	4b95      	ldr	r3, [pc, #596]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d1f1      	bne.n	8002e74 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2204      	movs	r2, #4
 8002e96:	4013      	ands	r3, r2
 8002e98:	d100      	bne.n	8002e9c <HAL_RCC_OscConfig+0x42c>
 8002e9a:	e0ae      	b.n	8002ffa <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9c:	2027      	movs	r0, #39	@ 0x27
 8002e9e:	183b      	adds	r3, r7, r0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002ea6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	055b      	lsls	r3, r3, #21
 8002eac:	4013      	ands	r3, r2
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	4b8a      	ldr	r3, [pc, #552]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002eb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002eb4:	4b89      	ldr	r3, [pc, #548]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002eb6:	2180      	movs	r1, #128	@ 0x80
 8002eb8:	0549      	lsls	r1, r1, #21
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b87      	ldr	r3, [pc, #540]	@ (80030e4 <HAL_RCC_OscConfig+0x674>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	2380      	movs	r3, #128	@ 0x80
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d11a      	bne.n	8002f06 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed0:	4b84      	ldr	r3, [pc, #528]	@ (80030e4 <HAL_RCC_OscConfig+0x674>)
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	4b83      	ldr	r3, [pc, #524]	@ (80030e4 <HAL_RCC_OscConfig+0x674>)
 8002ed6:	2180      	movs	r1, #128	@ 0x80
 8002ed8:	0049      	lsls	r1, r1, #1
 8002eda:	430a      	orrs	r2, r1
 8002edc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ede:	f7fe fa7d 	bl	80013dc <HAL_GetTick>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee8:	f7fe fa78 	bl	80013dc <HAL_GetTick>
 8002eec:	0002      	movs	r2, r0
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b64      	cmp	r3, #100	@ 0x64
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e173      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b7a      	ldr	r3, [pc, #488]	@ (80030e4 <HAL_RCC_OscConfig+0x674>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	2380      	movs	r3, #128	@ 0x80
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <HAL_RCC_OscConfig+0x4b2>
 8002f12:	4b72      	ldr	r3, [pc, #456]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f16:	4b71      	ldr	r3, [pc, #452]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	0049      	lsls	r1, r1, #1
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f20:	e031      	b.n	8002f86 <HAL_RCC_OscConfig+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x4d4>
 8002f2a:	4b6c      	ldr	r3, [pc, #432]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f30:	496b      	ldr	r1, [pc, #428]	@ (80030e0 <HAL_RCC_OscConfig+0x670>)
 8002f32:	400a      	ands	r2, r1
 8002f34:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f36:	4b69      	ldr	r3, [pc, #420]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f3a:	4b68      	ldr	r3, [pc, #416]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f3c:	496a      	ldr	r1, [pc, #424]	@ (80030e8 <HAL_RCC_OscConfig+0x678>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f42:	e020      	b.n	8002f86 <HAL_RCC_OscConfig+0x516>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	23a0      	movs	r3, #160	@ 0xa0
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d10e      	bne.n	8002f6e <HAL_RCC_OscConfig+0x4fe>
 8002f50:	4b62      	ldr	r3, [pc, #392]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f54:	4b61      	ldr	r3, [pc, #388]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	00c9      	lsls	r1, r1, #3
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f62:	4b5e      	ldr	r3, [pc, #376]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f64:	2180      	movs	r1, #128	@ 0x80
 8002f66:	0049      	lsls	r1, r1, #1
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f6c:	e00b      	b.n	8002f86 <HAL_RCC_OscConfig+0x516>
 8002f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f72:	4b5a      	ldr	r3, [pc, #360]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f74:	495a      	ldr	r1, [pc, #360]	@ (80030e0 <HAL_RCC_OscConfig+0x670>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f7a:	4b58      	ldr	r3, [pc, #352]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f7e:	4b57      	ldr	r3, [pc, #348]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002f80:	4959      	ldr	r1, [pc, #356]	@ (80030e8 <HAL_RCC_OscConfig+0x678>)
 8002f82:	400a      	ands	r2, r1
 8002f84:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d015      	beq.n	8002fba <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8e:	f7fe fa25 	bl	80013dc <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f96:	e009      	b.n	8002fac <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fa20 	bl	80013dc <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e11a      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fac:	4b4b      	ldr	r3, [pc, #300]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002fae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCC_OscConfig+0x528>
 8002fb8:	e014      	b.n	8002fe4 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fba:	f7fe fa0f 	bl	80013dc <HAL_GetTick>
 8002fbe:	0003      	movs	r3, r0
 8002fc0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc2:	e009      	b.n	8002fd8 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fa0a 	bl	80013dc <HAL_GetTick>
 8002fc8:	0002      	movs	r2, r0
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	4a47      	ldr	r2, [pc, #284]	@ (80030ec <HAL_RCC_OscConfig+0x67c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e104      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002fda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d1ef      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fe4:	2327      	movs	r3, #39	@ 0x27
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d105      	bne.n	8002ffa <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fee:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff2:	4b3a      	ldr	r3, [pc, #232]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8002ff4:	493e      	ldr	r1, [pc, #248]	@ (80030f0 <HAL_RCC_OscConfig+0x680>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2220      	movs	r2, #32
 8003000:	4013      	ands	r3, r2
 8003002:	d049      	beq.n	8003098 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d026      	beq.n	800305a <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	4b32      	ldr	r3, [pc, #200]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8003012:	2101      	movs	r1, #1
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	4b30      	ldr	r3, [pc, #192]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 800301a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301c:	4b2f      	ldr	r3, [pc, #188]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 800301e:	2101      	movs	r1, #1
 8003020:	430a      	orrs	r2, r1
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34
 8003024:	4b33      	ldr	r3, [pc, #204]	@ (80030f4 <HAL_RCC_OscConfig+0x684>)
 8003026:	6a1a      	ldr	r2, [r3, #32]
 8003028:	4b32      	ldr	r3, [pc, #200]	@ (80030f4 <HAL_RCC_OscConfig+0x684>)
 800302a:	2180      	movs	r1, #128	@ 0x80
 800302c:	0189      	lsls	r1, r1, #6
 800302e:	430a      	orrs	r2, r1
 8003030:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003032:	f7fe f9d3 	bl	80013dc <HAL_GetTick>
 8003036:	0003      	movs	r3, r0
 8003038:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303c:	f7fe f9ce 	bl	80013dc <HAL_GetTick>
 8003040:	0002      	movs	r2, r0
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e0c9      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800304e:	4b23      	ldr	r3, [pc, #140]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2202      	movs	r2, #2
 8003054:	4013      	ands	r3, r2
 8003056:	d0f1      	beq.n	800303c <HAL_RCC_OscConfig+0x5cc>
 8003058:	e01e      	b.n	8003098 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8003060:	2101      	movs	r1, #1
 8003062:	438a      	bics	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
 8003066:	4b23      	ldr	r3, [pc, #140]	@ (80030f4 <HAL_RCC_OscConfig+0x684>)
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <HAL_RCC_OscConfig+0x684>)
 800306c:	4922      	ldr	r1, [pc, #136]	@ (80030f8 <HAL_RCC_OscConfig+0x688>)
 800306e:	400a      	ands	r2, r1
 8003070:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe f9b3 	bl	80013dc <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800307c:	f7fe f9ae 	bl	80013dc <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e0a9      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800308e:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2202      	movs	r2, #2
 8003094:	4013      	ands	r3, r2
 8003096:	d1f1      	bne.n	800307c <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d100      	bne.n	80030a2 <HAL_RCC_OscConfig+0x632>
 80030a0:	e09e      	b.n	80031e0 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d100      	bne.n	80030aa <HAL_RCC_OscConfig+0x63a>
 80030a8:	e077      	b.n	800319a <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d158      	bne.n	8003164 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b2:	4b0a      	ldr	r3, [pc, #40]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b09      	ldr	r3, [pc, #36]	@ (80030dc <HAL_RCC_OscConfig+0x66c>)
 80030b8:	4910      	ldr	r1, [pc, #64]	@ (80030fc <HAL_RCC_OscConfig+0x68c>)
 80030ba:	400a      	ands	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fe f98d 	bl	80013dc <HAL_GetTick>
 80030c2:	0003      	movs	r3, r0
 80030c4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030c6:	e01b      	b.n	8003100 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c8:	f7fe f988 	bl	80013dc <HAL_GetTick>
 80030cc:	0002      	movs	r2, r0
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d914      	bls.n	8003100 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e083      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	40021000 	.word	0x40021000
 80030e0:	fffffeff 	.word	0xfffffeff
 80030e4:	40007000 	.word	0x40007000
 80030e8:	fffffbff 	.word	0xfffffbff
 80030ec:	00001388 	.word	0x00001388
 80030f0:	efffffff 	.word	0xefffffff
 80030f4:	40010000 	.word	0x40010000
 80030f8:	ffffdfff 	.word	0xffffdfff
 80030fc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003100:	4b3a      	ldr	r3, [pc, #232]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	@ 0x80
 8003106:	049b      	lsls	r3, r3, #18
 8003108:	4013      	ands	r3, r2
 800310a:	d1dd      	bne.n	80030c8 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800310c:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a37      	ldr	r2, [pc, #220]	@ (80031f0 <HAL_RCC_OscConfig+0x780>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003124:	431a      	orrs	r2, r3
 8003126:	4b31      	ldr	r3, [pc, #196]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800312c:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4b2e      	ldr	r3, [pc, #184]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 8003132:	2180      	movs	r1, #128	@ 0x80
 8003134:	0449      	lsls	r1, r1, #17
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe f94f 	bl	80013dc <HAL_GetTick>
 800313e:	0003      	movs	r3, r0
 8003140:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe f94a 	bl	80013dc <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e045      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003156:	4b25      	ldr	r3, [pc, #148]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	@ 0x80
 800315c:	049b      	lsls	r3, r3, #18
 800315e:	4013      	ands	r3, r2
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x6d4>
 8003162:	e03d      	b.n	80031e0 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003164:	4b21      	ldr	r3, [pc, #132]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 800316a:	4922      	ldr	r1, [pc, #136]	@ (80031f4 <HAL_RCC_OscConfig+0x784>)
 800316c:	400a      	ands	r2, r1
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe f934 	bl	80013dc <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317a:	f7fe f92f 	bl	80013dc <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e02a      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800318c:	4b17      	ldr	r3, [pc, #92]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2380      	movs	r3, #128	@ 0x80
 8003192:	049b      	lsls	r3, r3, #18
 8003194:	4013      	ands	r3, r2
 8003196:	d1f0      	bne.n	800317a <HAL_RCC_OscConfig+0x70a>
 8003198:	e022      	b.n	80031e0 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e01d      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031a6:	4b11      	ldr	r3, [pc, #68]	@ (80031ec <HAL_RCC_OscConfig+0x77c>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	025b      	lsls	r3, r3, #9
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d10f      	bne.n	80031dc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031bc:	69fa      	ldr	r2, [r7, #28]
 80031be:	23f0      	movs	r3, #240	@ 0xf0
 80031c0:	039b      	lsls	r3, r3, #14
 80031c2:	401a      	ands	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	23c0      	movs	r3, #192	@ 0xc0
 80031d0:	041b      	lsls	r3, r3, #16
 80031d2:	401a      	ands	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031d8:	429a      	cmp	r2, r3
 80031da:	d001      	beq.n	80031e0 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	0018      	movs	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b00a      	add	sp, #40	@ 0x28
 80031e8:	bdb0      	pop	{r4, r5, r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	40021000 	.word	0x40021000
 80031f0:	ff02ffff 	.word	0xff02ffff
 80031f4:	feffffff 	.word	0xfeffffff

080031f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031f8:	b5b0      	push	{r4, r5, r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e128      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800320c:	4b96      	ldr	r3, [pc, #600]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2201      	movs	r2, #1
 8003212:	4013      	ands	r3, r2
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d91e      	bls.n	8003258 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b93      	ldr	r3, [pc, #588]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2201      	movs	r2, #1
 8003220:	4393      	bics	r3, r2
 8003222:	0019      	movs	r1, r3
 8003224:	4b90      	ldr	r3, [pc, #576]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800322c:	f7fe f8d6 	bl	80013dc <HAL_GetTick>
 8003230:	0003      	movs	r3, r0
 8003232:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003234:	e009      	b.n	800324a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003236:	f7fe f8d1 	bl	80013dc <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	4a8a      	ldr	r2, [pc, #552]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d901      	bls.n	800324a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e109      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324a:	4b87      	ldr	r3, [pc, #540]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d1ee      	bne.n	8003236 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2202      	movs	r2, #2
 800325e:	4013      	ands	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003262:	4b83      	ldr	r3, [pc, #524]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	22f0      	movs	r2, #240	@ 0xf0
 8003268:	4393      	bics	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	4b7f      	ldr	r3, [pc, #508]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 8003272:	430a      	orrs	r2, r1
 8003274:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2201      	movs	r2, #1
 800327c:	4013      	ands	r3, r2
 800327e:	d100      	bne.n	8003282 <HAL_RCC_ClockConfig+0x8a>
 8003280:	e089      	b.n	8003396 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b02      	cmp	r3, #2
 8003288:	d107      	bne.n	800329a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800328a:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	029b      	lsls	r3, r3, #10
 8003292:	4013      	ands	r3, r2
 8003294:	d120      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0e1      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032a2:	4b73      	ldr	r3, [pc, #460]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	2380      	movs	r3, #128	@ 0x80
 80032a8:	049b      	lsls	r3, r3, #18
 80032aa:	4013      	ands	r3, r2
 80032ac:	d114      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e0d5      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d106      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2204      	movs	r2, #4
 80032c0:	4013      	ands	r3, r2
 80032c2:	d109      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0ca      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032c8:	4b69      	ldr	r3, [pc, #420]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	2380      	movs	r3, #128	@ 0x80
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4013      	ands	r3, r2
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0c2      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032d8:	4b65      	ldr	r3, [pc, #404]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	2203      	movs	r2, #3
 80032de:	4393      	bics	r3, r2
 80032e0:	0019      	movs	r1, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4b62      	ldr	r3, [pc, #392]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032ec:	f7fe f876 	bl	80013dc <HAL_GetTick>
 80032f0:	0003      	movs	r3, r0
 80032f2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032fc:	e009      	b.n	8003312 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fe:	f7fe f86d 	bl	80013dc <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	4a58      	ldr	r2, [pc, #352]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e0a5      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003312:	4b57      	ldr	r3, [pc, #348]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	220c      	movs	r2, #12
 8003318:	4013      	ands	r3, r2
 800331a:	2b08      	cmp	r3, #8
 800331c:	d1ef      	bne.n	80032fe <HAL_RCC_ClockConfig+0x106>
 800331e:	e03a      	b.n	8003396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d111      	bne.n	800334c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003328:	e009      	b.n	800333e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332a:	f7fe f857 	bl	80013dc <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	4a4d      	ldr	r2, [pc, #308]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e08f      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333e:	4b4c      	ldr	r3, [pc, #304]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	220c      	movs	r2, #12
 8003344:	4013      	ands	r3, r2
 8003346:	2b0c      	cmp	r3, #12
 8003348:	d1ef      	bne.n	800332a <HAL_RCC_ClockConfig+0x132>
 800334a:	e024      	b.n	8003396 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d11b      	bne.n	800338c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003354:	e009      	b.n	800336a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003356:	f7fe f841 	bl	80013dc <HAL_GetTick>
 800335a:	0002      	movs	r2, r0
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	4a42      	ldr	r2, [pc, #264]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e079      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800336a:	4b41      	ldr	r3, [pc, #260]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	220c      	movs	r2, #12
 8003370:	4013      	ands	r3, r2
 8003372:	2b04      	cmp	r3, #4
 8003374:	d1ef      	bne.n	8003356 <HAL_RCC_ClockConfig+0x15e>
 8003376:	e00e      	b.n	8003396 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003378:	f7fe f830 	bl	80013dc <HAL_GetTick>
 800337c:	0002      	movs	r2, r0
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	4a3a      	ldr	r2, [pc, #232]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e068      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800338c:	4b38      	ldr	r3, [pc, #224]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	220c      	movs	r2, #12
 8003392:	4013      	ands	r3, r2
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003396:	4b34      	ldr	r3, [pc, #208]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	4013      	ands	r3, r2
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d21e      	bcs.n	80033e2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a4:	4b30      	ldr	r3, [pc, #192]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4393      	bics	r3, r2
 80033ac:	0019      	movs	r1, r3
 80033ae:	4b2e      	ldr	r3, [pc, #184]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033b6:	f7fe f811 	bl	80013dc <HAL_GetTick>
 80033ba:	0003      	movs	r3, r0
 80033bc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033be:	e009      	b.n	80033d4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7fe f80c 	bl	80013dc <HAL_GetTick>
 80033c4:	0002      	movs	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	4a28      	ldr	r2, [pc, #160]	@ (800346c <HAL_RCC_ClockConfig+0x274>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e044      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d4:	4b24      	ldr	r3, [pc, #144]	@ (8003468 <HAL_RCC_ClockConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2201      	movs	r2, #1
 80033da:	4013      	ands	r3, r2
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d1ee      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4013      	ands	r3, r2
 80033ea:	d009      	beq.n	8003400 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b20      	ldr	r3, [pc, #128]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4a20      	ldr	r2, [pc, #128]	@ (8003474 <HAL_RCC_ClockConfig+0x27c>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2208      	movs	r2, #8
 8003406:	4013      	ands	r3, r2
 8003408:	d00a      	beq.n	8003420 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800340a:	4b19      	ldr	r3, [pc, #100]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	4a1a      	ldr	r2, [pc, #104]	@ (8003478 <HAL_RCC_ClockConfig+0x280>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	00da      	lsls	r2, r3, #3
 800341a:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 800341c:	430a      	orrs	r2, r1
 800341e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003420:	f000 f832 	bl	8003488 <HAL_RCC_GetSysClockFreq>
 8003424:	0001      	movs	r1, r0
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <HAL_RCC_ClockConfig+0x278>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	220f      	movs	r2, #15
 800342e:	4013      	ands	r3, r2
 8003430:	4a12      	ldr	r2, [pc, #72]	@ (800347c <HAL_RCC_ClockConfig+0x284>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	000a      	movs	r2, r1
 8003436:	40da      	lsrs	r2, r3
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_RCC_ClockConfig+0x288>)
 800343a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800343c:	4b11      	ldr	r3, [pc, #68]	@ (8003484 <HAL_RCC_ClockConfig+0x28c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	250b      	movs	r5, #11
 8003442:	197c      	adds	r4, r7, r5
 8003444:	0018      	movs	r0, r3
 8003446:	f7fd ff83 	bl	8001350 <HAL_InitTick>
 800344a:	0003      	movs	r3, r0
 800344c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800344e:	197b      	adds	r3, r7, r5
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d002      	beq.n	800345c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003456:	197b      	adds	r3, r7, r5
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	e000      	b.n	800345e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	0018      	movs	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bdb0      	pop	{r4, r5, r7, pc}
 8003466:	46c0      	nop			@ (mov r8, r8)
 8003468:	40022000 	.word	0x40022000
 800346c:	00001388 	.word	0x00001388
 8003470:	40021000 	.word	0x40021000
 8003474:	fffff8ff 	.word	0xfffff8ff
 8003478:	ffffc7ff 	.word	0xffffc7ff
 800347c:	08004704 	.word	0x08004704
 8003480:	20000000 	.word	0x20000000
 8003484:	2000000c 	.word	0x2000000c

08003488 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	b08e      	sub	sp, #56	@ 0x38
 800348c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800348e:	4b4c      	ldr	r3, [pc, #304]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003496:	230c      	movs	r3, #12
 8003498:	4013      	ands	r3, r2
 800349a:	2b0c      	cmp	r3, #12
 800349c:	d014      	beq.n	80034c8 <HAL_RCC_GetSysClockFreq+0x40>
 800349e:	d900      	bls.n	80034a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80034a0:	e07b      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x112>
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x24>
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034aa:	e076      	b.n	800359a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034ac:	4b44      	ldr	r3, [pc, #272]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2210      	movs	r2, #16
 80034b2:	4013      	ands	r3, r2
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034b6:	4b43      	ldr	r3, [pc, #268]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034ba:	e07c      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80034bc:	4b42      	ldr	r3, [pc, #264]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80034c0:	e079      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c2:	4b42      	ldr	r3, [pc, #264]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x144>)
 80034c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80034c6:	e076      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	0c9a      	lsrs	r2, r3, #18
 80034cc:	230f      	movs	r3, #15
 80034ce:	401a      	ands	r2, r3
 80034d0:	4b3f      	ldr	r3, [pc, #252]	@ (80035d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
 80034d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d8:	0d9a      	lsrs	r2, r3, #22
 80034da:	2303      	movs	r3, #3
 80034dc:	4013      	ands	r3, r2
 80034de:	3301      	adds	r3, #1
 80034e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e2:	4b37      	ldr	r3, [pc, #220]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	025b      	lsls	r3, r3, #9
 80034ea:	4013      	ands	r3, r2
 80034ec:	d01a      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	61bb      	str	r3, [r7, #24]
 80034f2:	2300      	movs	r3, #0
 80034f4:	61fb      	str	r3, [r7, #28]
 80034f6:	4a35      	ldr	r2, [pc, #212]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x144>)
 80034f8:	2300      	movs	r3, #0
 80034fa:	69b8      	ldr	r0, [r7, #24]
 80034fc:	69f9      	ldr	r1, [r7, #28]
 80034fe:	f7fc feb9 	bl	8000274 <__aeabi_lmul>
 8003502:	0002      	movs	r2, r0
 8003504:	000b      	movs	r3, r1
 8003506:	0010      	movs	r0, r2
 8003508:	0019      	movs	r1, r3
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f7fc fe8d 	bl	8000234 <__aeabi_uldivmod>
 800351a:	0002      	movs	r2, r0
 800351c:	000b      	movs	r3, r1
 800351e:	0013      	movs	r3, r2
 8003520:	637b      	str	r3, [r7, #52]	@ 0x34
 8003522:	e037      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003524:	4b26      	ldr	r3, [pc, #152]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	4013      	ands	r3, r2
 800352c:	d01a      	beq.n	8003564 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800352e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003530:	60bb      	str	r3, [r7, #8]
 8003532:	2300      	movs	r3, #0
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	4a23      	ldr	r2, [pc, #140]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003538:	2300      	movs	r3, #0
 800353a:	68b8      	ldr	r0, [r7, #8]
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	f7fc fe99 	bl	8000274 <__aeabi_lmul>
 8003542:	0002      	movs	r2, r0
 8003544:	000b      	movs	r3, r1
 8003546:	0010      	movs	r0, r2
 8003548:	0019      	movs	r1, r3
 800354a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f7fc fe6d 	bl	8000234 <__aeabi_uldivmod>
 800355a:	0002      	movs	r2, r0
 800355c:	000b      	movs	r3, r1
 800355e:	0013      	movs	r3, r2
 8003560:	637b      	str	r3, [r7, #52]	@ 0x34
 8003562:	e017      	b.n	8003594 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	0018      	movs	r0, r3
 8003568:	2300      	movs	r3, #0
 800356a:	0019      	movs	r1, r3
 800356c:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x140>)
 800356e:	2300      	movs	r3, #0
 8003570:	f7fc fe80 	bl	8000274 <__aeabi_lmul>
 8003574:	0002      	movs	r2, r0
 8003576:	000b      	movs	r3, r1
 8003578:	0010      	movs	r0, r2
 800357a:	0019      	movs	r1, r3
 800357c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357e:	001c      	movs	r4, r3
 8003580:	2300      	movs	r3, #0
 8003582:	001d      	movs	r5, r3
 8003584:	0022      	movs	r2, r4
 8003586:	002b      	movs	r3, r5
 8003588:	f7fc fe54 	bl	8000234 <__aeabi_uldivmod>
 800358c:	0002      	movs	r2, r0
 800358e:	000b      	movs	r3, r1
 8003590:	0013      	movs	r3, r2
 8003592:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003596:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003598:	e00d      	b.n	80035b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800359a:	4b09      	ldr	r3, [pc, #36]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x138>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	0b5b      	lsrs	r3, r3, #13
 80035a0:	2207      	movs	r2, #7
 80035a2:	4013      	ands	r3, r2
 80035a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	3301      	adds	r3, #1
 80035aa:	2280      	movs	r2, #128	@ 0x80
 80035ac:	0212      	lsls	r2, r2, #8
 80035ae:	409a      	lsls	r2, r3
 80035b0:	0013      	movs	r3, r2
 80035b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80035b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80035b8:	0018      	movs	r0, r3
 80035ba:	46bd      	mov	sp, r7
 80035bc:	b00e      	add	sp, #56	@ 0x38
 80035be:	bdb0      	pop	{r4, r5, r7, pc}
 80035c0:	40021000 	.word	0x40021000
 80035c4:	003d0900 	.word	0x003d0900
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200
 80035d0:	08004714 	.word	0x08004714

080035d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80035dc:	2317      	movs	r3, #23
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2220      	movs	r2, #32
 80035ea:	4013      	ands	r3, r2
 80035ec:	d106      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	2380      	movs	r3, #128	@ 0x80
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	4013      	ands	r3, r2
 80035f8:	d100      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80035fa:	e104      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fc:	4bb1      	ldr	r3, [pc, #708]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80035fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	055b      	lsls	r3, r3, #21
 8003604:	4013      	ands	r3, r2
 8003606:	d10a      	bne.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003608:	4bae      	ldr	r3, [pc, #696]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800360a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800360c:	4bad      	ldr	r3, [pc, #692]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800360e:	2180      	movs	r1, #128	@ 0x80
 8003610:	0549      	lsls	r1, r1, #21
 8003612:	430a      	orrs	r2, r1
 8003614:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003616:	2317      	movs	r3, #23
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4baa      	ldr	r3, [pc, #680]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	@ 0x80
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4013      	ands	r3, r2
 8003628:	d11a      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4ba7      	ldr	r3, [pc, #668]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4ba6      	ldr	r3, [pc, #664]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003630:	2180      	movs	r1, #128	@ 0x80
 8003632:	0049      	lsls	r1, r1, #1
 8003634:	430a      	orrs	r2, r1
 8003636:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003638:	f7fd fed0 	bl	80013dc <HAL_GetTick>
 800363c:	0003      	movs	r3, r0
 800363e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fd fecb 	bl	80013dc <HAL_GetTick>
 8003646:	0002      	movs	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	@ 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e133      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b9c      	ldr	r3, [pc, #624]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	@ 0x80
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4013      	ands	r3, r2
 800365e:	d0f0      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003660:	4b98      	ldr	r3, [pc, #608]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	23c0      	movs	r3, #192	@ 0xc0
 8003666:	039b      	lsls	r3, r3, #14
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	23c0      	movs	r3, #192	@ 0xc0
 8003672:	039b      	lsls	r3, r3, #14
 8003674:	4013      	ands	r3, r2
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	429a      	cmp	r2, r3
 800367a:	d107      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	23c0      	movs	r3, #192	@ 0xc0
 8003682:	039b      	lsls	r3, r3, #14
 8003684:	4013      	ands	r3, r2
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	429a      	cmp	r2, r3
 800368a:	d013      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	23c0      	movs	r3, #192	@ 0xc0
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	401a      	ands	r2, r3
 8003696:	23c0      	movs	r3, #192	@ 0xc0
 8003698:	029b      	lsls	r3, r3, #10
 800369a:	429a      	cmp	r2, r3
 800369c:	d10a      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800369e:	4b89      	ldr	r3, [pc, #548]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	@ 0x80
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	401a      	ands	r2, r3
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	029b      	lsls	r3, r3, #10
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d101      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e103      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036b4:	4b83      	ldr	r3, [pc, #524]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036b8:	23c0      	movs	r3, #192	@ 0xc0
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d049      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	23c0      	movs	r3, #192	@ 0xc0
 80036cc:	029b      	lsls	r3, r3, #10
 80036ce:	4013      	ands	r3, r2
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d004      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2220      	movs	r2, #32
 80036dc:	4013      	ands	r3, r2
 80036de:	d10d      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	23c0      	movs	r3, #192	@ 0xc0
 80036e6:	029b      	lsls	r3, r3, #10
 80036e8:	4013      	ands	r3, r2
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d034      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	2380      	movs	r3, #128	@ 0x80
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	4013      	ands	r3, r2
 80036fa:	d02e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80036fc:	4b71      	ldr	r3, [pc, #452]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80036fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003700:	4a72      	ldr	r2, [pc, #456]	@ (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003706:	4b6f      	ldr	r3, [pc, #444]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003708:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800370a:	4b6e      	ldr	r3, [pc, #440]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800370c:	2180      	movs	r1, #128	@ 0x80
 800370e:	0309      	lsls	r1, r1, #12
 8003710:	430a      	orrs	r2, r1
 8003712:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003714:	4b6b      	ldr	r3, [pc, #428]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003716:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003718:	4b6a      	ldr	r3, [pc, #424]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800371a:	496d      	ldr	r1, [pc, #436]	@ (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 800371c:	400a      	ands	r2, r1
 800371e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003720:	4b68      	ldr	r3, [pc, #416]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	2380      	movs	r3, #128	@ 0x80
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4013      	ands	r3, r2
 800372e:	d014      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003730:	f7fd fe54 	bl	80013dc <HAL_GetTick>
 8003734:	0003      	movs	r3, r0
 8003736:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003738:	e009      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800373a:	f7fd fe4f 	bl	80013dc <HAL_GetTick>
 800373e:	0002      	movs	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	4a63      	ldr	r2, [pc, #396]	@ (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0b6      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800374e:	4b5d      	ldr	r3, [pc, #372]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003750:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4013      	ands	r3, r2
 8003758:	d0ef      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	4013      	ands	r3, r2
 8003764:	d01f      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	23c0      	movs	r3, #192	@ 0xc0
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	401a      	ands	r2, r3
 8003770:	23c0      	movs	r3, #192	@ 0xc0
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	429a      	cmp	r2, r3
 8003776:	d10c      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003778:	4b52      	ldr	r3, [pc, #328]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a56      	ldr	r2, [pc, #344]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	23c0      	movs	r3, #192	@ 0xc0
 8003788:	039b      	lsls	r3, r3, #14
 800378a:	401a      	ands	r2, r3
 800378c:	4b4d      	ldr	r3, [pc, #308]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b4c      	ldr	r3, [pc, #304]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003794:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	23c0      	movs	r3, #192	@ 0xc0
 800379c:	029b      	lsls	r3, r3, #10
 800379e:	401a      	ands	r2, r3
 80037a0:	4b48      	ldr	r3, [pc, #288]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	4013      	ands	r3, r2
 80037ae:	d01f      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	23c0      	movs	r3, #192	@ 0xc0
 80037b6:	029b      	lsls	r3, r3, #10
 80037b8:	401a      	ands	r2, r3
 80037ba:	23c0      	movs	r3, #192	@ 0xc0
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	429a      	cmp	r2, r3
 80037c0:	d10c      	bne.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80037c2:	4b40      	ldr	r3, [pc, #256]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a44      	ldr	r2, [pc, #272]	@ (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	0019      	movs	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	23c0      	movs	r3, #192	@ 0xc0
 80037d2:	039b      	lsls	r3, r3, #14
 80037d4:	401a      	ands	r2, r3
 80037d6:	4b3b      	ldr	r3, [pc, #236]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	4b39      	ldr	r3, [pc, #228]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037de:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	23c0      	movs	r3, #192	@ 0xc0
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	401a      	ands	r2, r3
 80037ea:	4b36      	ldr	r3, [pc, #216]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037ec:	430a      	orrs	r2, r1
 80037ee:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037f0:	2317      	movs	r3, #23
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037fa:	4b32      	ldr	r3, [pc, #200]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80037fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037fe:	4b31      	ldr	r3, [pc, #196]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003800:	4936      	ldr	r1, [pc, #216]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003802:	400a      	ands	r2, r1
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003810:	4b2c      	ldr	r3, [pc, #176]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003814:	2203      	movs	r2, #3
 8003816:	4393      	bics	r3, r2
 8003818:	0019      	movs	r1, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	4b29      	ldr	r3, [pc, #164]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003820:	430a      	orrs	r2, r1
 8003822:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2202      	movs	r2, #2
 800382a:	4013      	ands	r3, r2
 800382c:	d009      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800382e:	4b25      	ldr	r3, [pc, #148]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003832:	220c      	movs	r2, #12
 8003834:	4393      	bics	r3, r2
 8003836:	0019      	movs	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800383e:	430a      	orrs	r2, r1
 8003840:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2204      	movs	r2, #4
 8003848:	4013      	ands	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800384c:	4b1d      	ldr	r3, [pc, #116]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	4a23      	ldr	r2, [pc, #140]	@ (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695a      	ldr	r2, [r3, #20]
 800385a:	4b1a      	ldr	r3, [pc, #104]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800385c:	430a      	orrs	r2, r1
 800385e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2208      	movs	r2, #8
 8003866:	4013      	ands	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800386a:	4b16      	ldr	r3, [pc, #88]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	4a1d      	ldr	r2, [pc, #116]	@ (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699a      	ldr	r2, [r3, #24]
 8003878:	4b12      	ldr	r3, [pc, #72]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800387a:	430a      	orrs	r2, r1
 800387c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2240      	movs	r2, #64	@ 0x40
 8003884:	4013      	ands	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003888:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800388a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388c:	4a16      	ldr	r2, [pc, #88]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1a      	ldr	r2, [r3, #32]
 8003896:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003898:	430a      	orrs	r2, r1
 800389a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2280      	movs	r2, #128	@ 0x80
 80038a2:	4013      	ands	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038a6:	4b07      	ldr	r3, [pc, #28]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038aa:	4a10      	ldr	r2, [pc, #64]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80038b6:	430a      	orrs	r2, r1
 80038b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40021000 	.word	0x40021000
 80038c8:	40007000 	.word	0x40007000
 80038cc:	fffcffff 	.word	0xfffcffff
 80038d0:	fff7ffff 	.word	0xfff7ffff
 80038d4:	00001388 	.word	0x00001388
 80038d8:	ffcfffff 	.word	0xffcfffff
 80038dc:	efffffff 	.word	0xefffffff
 80038e0:	fffff3ff 	.word	0xfffff3ff
 80038e4:	ffffcfff 	.word	0xffffcfff
 80038e8:	fbffffff 	.word	0xfbffffff
 80038ec:	fff3ffff 	.word	0xfff3ffff

080038f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e032      	b.n	8003968 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2239      	movs	r2, #57	@ 0x39
 8003906:	5c9b      	ldrb	r3, [r3, r2]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d107      	bne.n	800391e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2238      	movs	r2, #56	@ 0x38
 8003912:	2100      	movs	r1, #0
 8003914:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f7fd f9c3 	bl	8000ca4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2239      	movs	r2, #57	@ 0x39
 8003922:	2102      	movs	r1, #2
 8003924:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	0019      	movs	r1, r3
 8003930:	0010      	movs	r0, r2
 8003932:	f000 f979 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	223e      	movs	r2, #62	@ 0x3e
 800393a:	2101      	movs	r1, #1
 800393c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	223a      	movs	r2, #58	@ 0x3a
 8003942:	2101      	movs	r1, #1
 8003944:	5499      	strb	r1, [r3, r2]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	223b      	movs	r2, #59	@ 0x3b
 800394a:	2101      	movs	r1, #1
 800394c:	5499      	strb	r1, [r3, r2]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223c      	movs	r2, #60	@ 0x3c
 8003952:	2101      	movs	r1, #1
 8003954:	5499      	strb	r1, [r3, r2]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	223d      	movs	r2, #61	@ 0x3d
 800395a:	2101      	movs	r1, #1
 800395c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2239      	movs	r2, #57	@ 0x39
 8003962:	2101      	movs	r1, #1
 8003964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	0018      	movs	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2239      	movs	r2, #57	@ 0x39
 800397c:	5c9b      	ldrb	r3, [r3, r2]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d001      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e036      	b.n	80039f6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2239      	movs	r2, #57	@ 0x39
 800398c:	2102      	movs	r1, #2
 800398e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2101      	movs	r1, #1
 800399c:	430a      	orrs	r2, r1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	05db      	lsls	r3, r3, #23
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d009      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x50>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a13      	ldr	r2, [pc, #76]	@ (8003a00 <HAL_TIM_Base_Start_IT+0x90>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_TIM_Base_Start_IT+0x50>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a12      	ldr	r2, [pc, #72]	@ (8003a04 <HAL_TIM_Base_Start_IT+0x94>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d111      	bne.n	80039e4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	2207      	movs	r2, #7
 80039c8:	4013      	ands	r3, r2
 80039ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	d010      	beq.n	80039f4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2101      	movs	r1, #1
 80039de:	430a      	orrs	r2, r1
 80039e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e2:	e007      	b.n	80039f4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2101      	movs	r1, #1
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	40010800 	.word	0x40010800
 8003a04:	40011400 	.word	0x40011400

08003a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	2202      	movs	r2, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d124      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2202      	movs	r2, #2
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d11d      	bne.n	8003a68 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2203      	movs	r2, #3
 8003a32:	4252      	negs	r2, r2
 8003a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2203      	movs	r2, #3
 8003a44:	4013      	ands	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f000 f8d4 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003a50:	e007      	b.n	8003a62 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f000 f8c7 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 f8d3 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	2204      	movs	r2, #4
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d125      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d11e      	bne.n	8003ac2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2205      	movs	r2, #5
 8003a8a:	4252      	negs	r2, r2
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2202      	movs	r2, #2
 8003a92:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	23c0      	movs	r3, #192	@ 0xc0
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d004      	beq.n	8003aac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 f8a7 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003aaa:	e007      	b.n	8003abc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f000 f89a 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 f8a6 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2208      	movs	r2, #8
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d124      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d11d      	bne.n	8003b1a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2209      	movs	r2, #9
 8003ae4:	4252      	negs	r2, r2
 8003ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2204      	movs	r2, #4
 8003aec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	2203      	movs	r2, #3
 8003af6:	4013      	ands	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f000 f87b 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003b02:	e007      	b.n	8003b14 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f86e 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 f87a 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	2210      	movs	r2, #16
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d125      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2210      	movs	r2, #16
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b10      	cmp	r3, #16
 8003b34:	d11e      	bne.n	8003b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2211      	movs	r2, #17
 8003b3c:	4252      	negs	r2, r2
 8003b3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2208      	movs	r2, #8
 8003b44:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	23c0      	movs	r3, #192	@ 0xc0
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4013      	ands	r3, r2
 8003b52:	d004      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 f84e 	bl	8003bf8 <HAL_TIM_IC_CaptureCallback>
 8003b5c:	e007      	b.n	8003b6e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	0018      	movs	r0, r3
 8003b62:	f000 f841 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f84d 	bl	8003c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d10f      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d108      	bne.n	8003ba2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2202      	movs	r2, #2
 8003b96:	4252      	negs	r2, r2
 8003b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f000 f81b 	bl	8003bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2240      	movs	r2, #64	@ 0x40
 8003baa:	4013      	ands	r3, r2
 8003bac:	2b40      	cmp	r3, #64	@ 0x40
 8003bae:	d10f      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2240      	movs	r2, #64	@ 0x40
 8003bb8:	4013      	ands	r3, r2
 8003bba:	2b40      	cmp	r3, #64	@ 0x40
 8003bbc:	d108      	bne.n	8003bd0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2241      	movs	r2, #65	@ 0x41
 8003bc4:	4252      	negs	r2, r2
 8003bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f000 f824 	bl	8003c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b002      	add	sp, #8
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b002      	add	sp, #8
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	2380      	movs	r3, #128	@ 0x80
 8003c3c:	05db      	lsls	r3, r3, #23
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d007      	beq.n	8003c52 <TIM_Base_SetConfig+0x2a>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a1f      	ldr	r2, [pc, #124]	@ (8003cc4 <TIM_Base_SetConfig+0x9c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d003      	beq.n	8003c52 <TIM_Base_SetConfig+0x2a>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <TIM_Base_SetConfig+0xa0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2270      	movs	r2, #112	@ 0x70
 8003c56:	4393      	bics	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	2380      	movs	r3, #128	@ 0x80
 8003c68:	05db      	lsls	r3, r3, #23
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d007      	beq.n	8003c7e <TIM_Base_SetConfig+0x56>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a14      	ldr	r2, [pc, #80]	@ (8003cc4 <TIM_Base_SetConfig+0x9c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_Base_SetConfig+0x56>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	@ (8003cc8 <TIM_Base_SetConfig+0xa0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d108      	bne.n	8003c90 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4a12      	ldr	r2, [pc, #72]	@ (8003ccc <TIM_Base_SetConfig+0xa4>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	4393      	bics	r3, r2
 8003c96:	001a      	movs	r2, r3
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	615a      	str	r2, [r3, #20]
}
 8003cbc:	46c0      	nop			@ (mov r8, r8)
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	b004      	add	sp, #16
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40010800 	.word	0x40010800
 8003cc8:	40011400 	.word	0x40011400
 8003ccc:	fffffcff 	.word	0xfffffcff

08003cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2238      	movs	r2, #56	@ 0x38
 8003cde:	5c9b      	ldrb	r3, [r3, r2]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e042      	b.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2238      	movs	r2, #56	@ 0x38
 8003cec:	2101      	movs	r1, #1
 8003cee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2239      	movs	r2, #57	@ 0x39
 8003cf4:	2102      	movs	r1, #2
 8003cf6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2270      	movs	r2, #112	@ 0x70
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	2380      	movs	r3, #128	@ 0x80
 8003d28:	05db      	lsls	r3, r3, #23
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a11      	ldr	r2, [pc, #68]	@ (8003d78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10c      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2280      	movs	r2, #128	@ 0x80
 8003d46:	4393      	bics	r3, r2
 8003d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2239      	movs	r2, #57	@ 0x39
 8003d60:	2101      	movs	r1, #1
 8003d62:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2238      	movs	r2, #56	@ 0x38
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	40010800 	.word	0x40010800
 8003d7c:	40011400 	.word	0x40011400

08003d80 <siprintf>:
 8003d80:	b40e      	push	{r1, r2, r3}
 8003d82:	b510      	push	{r4, lr}
 8003d84:	2400      	movs	r4, #0
 8003d86:	490c      	ldr	r1, [pc, #48]	@ (8003db8 <siprintf+0x38>)
 8003d88:	b09d      	sub	sp, #116	@ 0x74
 8003d8a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003d8c:	9002      	str	r0, [sp, #8]
 8003d8e:	9006      	str	r0, [sp, #24]
 8003d90:	9107      	str	r1, [sp, #28]
 8003d92:	9104      	str	r1, [sp, #16]
 8003d94:	4809      	ldr	r0, [pc, #36]	@ (8003dbc <siprintf+0x3c>)
 8003d96:	490a      	ldr	r1, [pc, #40]	@ (8003dc0 <siprintf+0x40>)
 8003d98:	cb04      	ldmia	r3!, {r2}
 8003d9a:	9105      	str	r1, [sp, #20]
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	a902      	add	r1, sp, #8
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003da4:	f000 f9ba 	bl	800411c <_svfiprintf_r>
 8003da8:	9b02      	ldr	r3, [sp, #8]
 8003daa:	701c      	strb	r4, [r3, #0]
 8003dac:	b01d      	add	sp, #116	@ 0x74
 8003dae:	bc10      	pop	{r4}
 8003db0:	bc08      	pop	{r3}
 8003db2:	b003      	add	sp, #12
 8003db4:	4718      	bx	r3
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	7fffffff 	.word	0x7fffffff
 8003dbc:	20000014 	.word	0x20000014
 8003dc0:	ffff0208 	.word	0xffff0208

08003dc4 <memmove>:
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	4288      	cmp	r0, r1
 8003dc8:	d902      	bls.n	8003dd0 <memmove+0xc>
 8003dca:	188b      	adds	r3, r1, r2
 8003dcc:	4298      	cmp	r0, r3
 8003dce:	d308      	bcc.n	8003de2 <memmove+0x1e>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d007      	beq.n	8003de6 <memmove+0x22>
 8003dd6:	5ccc      	ldrb	r4, [r1, r3]
 8003dd8:	54c4      	strb	r4, [r0, r3]
 8003dda:	3301      	adds	r3, #1
 8003ddc:	e7f9      	b.n	8003dd2 <memmove+0xe>
 8003dde:	5c8b      	ldrb	r3, [r1, r2]
 8003de0:	5483      	strb	r3, [r0, r2]
 8003de2:	3a01      	subs	r2, #1
 8003de4:	d2fb      	bcs.n	8003dde <memmove+0x1a>
 8003de6:	bd10      	pop	{r4, pc}

08003de8 <memset>:
 8003de8:	0003      	movs	r3, r0
 8003dea:	1882      	adds	r2, r0, r2
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d100      	bne.n	8003df2 <memset+0xa>
 8003df0:	4770      	bx	lr
 8003df2:	7019      	strb	r1, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	e7f9      	b.n	8003dec <memset+0x4>

08003df8 <__errno>:
 8003df8:	4b01      	ldr	r3, [pc, #4]	@ (8003e00 <__errno+0x8>)
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	4770      	bx	lr
 8003dfe:	46c0      	nop			@ (mov r8, r8)
 8003e00:	20000014 	.word	0x20000014

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	2600      	movs	r6, #0
 8003e08:	4c0c      	ldr	r4, [pc, #48]	@ (8003e3c <__libc_init_array+0x38>)
 8003e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e40 <__libc_init_array+0x3c>)
 8003e0c:	1b64      	subs	r4, r4, r5
 8003e0e:	10a4      	asrs	r4, r4, #2
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	2600      	movs	r6, #0
 8003e16:	f000 fc51 	bl	80046bc <_init>
 8003e1a:	4c0a      	ldr	r4, [pc, #40]	@ (8003e44 <__libc_init_array+0x40>)
 8003e1c:	4d0a      	ldr	r5, [pc, #40]	@ (8003e48 <__libc_init_array+0x44>)
 8003e1e:	1b64      	subs	r4, r4, r5
 8003e20:	10a4      	asrs	r4, r4, #2
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	00b3      	lsls	r3, r6, #2
 8003e2a:	58eb      	ldr	r3, [r5, r3]
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	00b3      	lsls	r3, r6, #2
 8003e34:	58eb      	ldr	r3, [r5, r3]
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08004ec8 	.word	0x08004ec8
 8003e40:	08004ec8 	.word	0x08004ec8
 8003e44:	08004ecc 	.word	0x08004ecc
 8003e48:	08004ec8 	.word	0x08004ec8

08003e4c <__retarget_lock_acquire_recursive>:
 8003e4c:	4770      	bx	lr

08003e4e <__retarget_lock_release_recursive>:
 8003e4e:	4770      	bx	lr

08003e50 <memcpy>:
 8003e50:	2300      	movs	r3, #0
 8003e52:	b510      	push	{r4, lr}
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d100      	bne.n	8003e5a <memcpy+0xa>
 8003e58:	bd10      	pop	{r4, pc}
 8003e5a:	5ccc      	ldrb	r4, [r1, r3]
 8003e5c:	54c4      	strb	r4, [r0, r3]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	e7f8      	b.n	8003e54 <memcpy+0x4>
	...

08003e64 <_free_r>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	0005      	movs	r5, r0
 8003e68:	1e0c      	subs	r4, r1, #0
 8003e6a:	d010      	beq.n	8003e8e <_free_r+0x2a>
 8003e6c:	3c04      	subs	r4, #4
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da00      	bge.n	8003e76 <_free_r+0x12>
 8003e74:	18e4      	adds	r4, r4, r3
 8003e76:	0028      	movs	r0, r5
 8003e78:	f000 f8e0 	bl	800403c <__malloc_lock>
 8003e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef4 <_free_r+0x90>)
 8003e7e:	6813      	ldr	r3, [r2, #0]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <_free_r+0x2c>
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	6014      	str	r4, [r2, #0]
 8003e88:	0028      	movs	r0, r5
 8003e8a:	f000 f8df 	bl	800404c <__malloc_unlock>
 8003e8e:	bd70      	pop	{r4, r5, r6, pc}
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d908      	bls.n	8003ea6 <_free_r+0x42>
 8003e94:	6820      	ldr	r0, [r4, #0]
 8003e96:	1821      	adds	r1, r4, r0
 8003e98:	428b      	cmp	r3, r1
 8003e9a:	d1f3      	bne.n	8003e84 <_free_r+0x20>
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	1809      	adds	r1, r1, r0
 8003ea2:	6021      	str	r1, [r4, #0]
 8003ea4:	e7ee      	b.n	8003e84 <_free_r+0x20>
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <_free_r+0x4e>
 8003eae:	42a3      	cmp	r3, r4
 8003eb0:	d9f9      	bls.n	8003ea6 <_free_r+0x42>
 8003eb2:	6811      	ldr	r1, [r2, #0]
 8003eb4:	1850      	adds	r0, r2, r1
 8003eb6:	42a0      	cmp	r0, r4
 8003eb8:	d10b      	bne.n	8003ed2 <_free_r+0x6e>
 8003eba:	6820      	ldr	r0, [r4, #0]
 8003ebc:	1809      	adds	r1, r1, r0
 8003ebe:	1850      	adds	r0, r2, r1
 8003ec0:	6011      	str	r1, [r2, #0]
 8003ec2:	4283      	cmp	r3, r0
 8003ec4:	d1e0      	bne.n	8003e88 <_free_r+0x24>
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	1841      	adds	r1, r0, r1
 8003ecc:	6011      	str	r1, [r2, #0]
 8003ece:	6053      	str	r3, [r2, #4]
 8003ed0:	e7da      	b.n	8003e88 <_free_r+0x24>
 8003ed2:	42a0      	cmp	r0, r4
 8003ed4:	d902      	bls.n	8003edc <_free_r+0x78>
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	602b      	str	r3, [r5, #0]
 8003eda:	e7d5      	b.n	8003e88 <_free_r+0x24>
 8003edc:	6820      	ldr	r0, [r4, #0]
 8003ede:	1821      	adds	r1, r4, r0
 8003ee0:	428b      	cmp	r3, r1
 8003ee2:	d103      	bne.n	8003eec <_free_r+0x88>
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	1809      	adds	r1, r1, r0
 8003eea:	6021      	str	r1, [r4, #0]
 8003eec:	6063      	str	r3, [r4, #4]
 8003eee:	6054      	str	r4, [r2, #4]
 8003ef0:	e7ca      	b.n	8003e88 <_free_r+0x24>
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	200004c8 	.word	0x200004c8

08003ef8 <sbrk_aligned>:
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4e0f      	ldr	r6, [pc, #60]	@ (8003f38 <sbrk_aligned+0x40>)
 8003efc:	000d      	movs	r5, r1
 8003efe:	6831      	ldr	r1, [r6, #0]
 8003f00:	0004      	movs	r4, r0
 8003f02:	2900      	cmp	r1, #0
 8003f04:	d102      	bne.n	8003f0c <sbrk_aligned+0x14>
 8003f06:	f000 fb83 	bl	8004610 <_sbrk_r>
 8003f0a:	6030      	str	r0, [r6, #0]
 8003f0c:	0029      	movs	r1, r5
 8003f0e:	0020      	movs	r0, r4
 8003f10:	f000 fb7e 	bl	8004610 <_sbrk_r>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d103      	bne.n	8003f20 <sbrk_aligned+0x28>
 8003f18:	2501      	movs	r5, #1
 8003f1a:	426d      	negs	r5, r5
 8003f1c:	0028      	movs	r0, r5
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}
 8003f20:	2303      	movs	r3, #3
 8003f22:	1cc5      	adds	r5, r0, #3
 8003f24:	439d      	bics	r5, r3
 8003f26:	42a8      	cmp	r0, r5
 8003f28:	d0f8      	beq.n	8003f1c <sbrk_aligned+0x24>
 8003f2a:	1a29      	subs	r1, r5, r0
 8003f2c:	0020      	movs	r0, r4
 8003f2e:	f000 fb6f 	bl	8004610 <_sbrk_r>
 8003f32:	3001      	adds	r0, #1
 8003f34:	d1f2      	bne.n	8003f1c <sbrk_aligned+0x24>
 8003f36:	e7ef      	b.n	8003f18 <sbrk_aligned+0x20>
 8003f38:	200004c4 	.word	0x200004c4

08003f3c <_malloc_r>:
 8003f3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f3e:	2203      	movs	r2, #3
 8003f40:	1ccb      	adds	r3, r1, #3
 8003f42:	4393      	bics	r3, r2
 8003f44:	3308      	adds	r3, #8
 8003f46:	0005      	movs	r5, r0
 8003f48:	001f      	movs	r7, r3
 8003f4a:	2b0c      	cmp	r3, #12
 8003f4c:	d234      	bcs.n	8003fb8 <_malloc_r+0x7c>
 8003f4e:	270c      	movs	r7, #12
 8003f50:	42b9      	cmp	r1, r7
 8003f52:	d833      	bhi.n	8003fbc <_malloc_r+0x80>
 8003f54:	0028      	movs	r0, r5
 8003f56:	f000 f871 	bl	800403c <__malloc_lock>
 8003f5a:	4e37      	ldr	r6, [pc, #220]	@ (8004038 <_malloc_r+0xfc>)
 8003f5c:	6833      	ldr	r3, [r6, #0]
 8003f5e:	001c      	movs	r4, r3
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d12f      	bne.n	8003fc4 <_malloc_r+0x88>
 8003f64:	0039      	movs	r1, r7
 8003f66:	0028      	movs	r0, r5
 8003f68:	f7ff ffc6 	bl	8003ef8 <sbrk_aligned>
 8003f6c:	0004      	movs	r4, r0
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d15f      	bne.n	8004032 <_malloc_r+0xf6>
 8003f72:	6834      	ldr	r4, [r6, #0]
 8003f74:	9400      	str	r4, [sp, #0]
 8003f76:	9b00      	ldr	r3, [sp, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d14a      	bne.n	8004012 <_malloc_r+0xd6>
 8003f7c:	2c00      	cmp	r4, #0
 8003f7e:	d052      	beq.n	8004026 <_malloc_r+0xea>
 8003f80:	6823      	ldr	r3, [r4, #0]
 8003f82:	0028      	movs	r0, r5
 8003f84:	18e3      	adds	r3, r4, r3
 8003f86:	9900      	ldr	r1, [sp, #0]
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	f000 fb41 	bl	8004610 <_sbrk_r>
 8003f8e:	9b01      	ldr	r3, [sp, #4]
 8003f90:	4283      	cmp	r3, r0
 8003f92:	d148      	bne.n	8004026 <_malloc_r+0xea>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	0028      	movs	r0, r5
 8003f98:	1aff      	subs	r7, r7, r3
 8003f9a:	0039      	movs	r1, r7
 8003f9c:	f7ff ffac 	bl	8003ef8 <sbrk_aligned>
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d040      	beq.n	8004026 <_malloc_r+0xea>
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	19db      	adds	r3, r3, r7
 8003fa8:	6023      	str	r3, [r4, #0]
 8003faa:	6833      	ldr	r3, [r6, #0]
 8003fac:	685a      	ldr	r2, [r3, #4]
 8003fae:	2a00      	cmp	r2, #0
 8003fb0:	d133      	bne.n	800401a <_malloc_r+0xde>
 8003fb2:	9b00      	ldr	r3, [sp, #0]
 8003fb4:	6033      	str	r3, [r6, #0]
 8003fb6:	e019      	b.n	8003fec <_malloc_r+0xb0>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	dac9      	bge.n	8003f50 <_malloc_r+0x14>
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fc4:	6821      	ldr	r1, [r4, #0]
 8003fc6:	1bc9      	subs	r1, r1, r7
 8003fc8:	d420      	bmi.n	800400c <_malloc_r+0xd0>
 8003fca:	290b      	cmp	r1, #11
 8003fcc:	d90a      	bls.n	8003fe4 <_malloc_r+0xa8>
 8003fce:	19e2      	adds	r2, r4, r7
 8003fd0:	6027      	str	r7, [r4, #0]
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	d104      	bne.n	8003fe0 <_malloc_r+0xa4>
 8003fd6:	6032      	str	r2, [r6, #0]
 8003fd8:	6863      	ldr	r3, [r4, #4]
 8003fda:	6011      	str	r1, [r2, #0]
 8003fdc:	6053      	str	r3, [r2, #4]
 8003fde:	e005      	b.n	8003fec <_malloc_r+0xb0>
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	e7f9      	b.n	8003fd8 <_malloc_r+0x9c>
 8003fe4:	6862      	ldr	r2, [r4, #4]
 8003fe6:	42a3      	cmp	r3, r4
 8003fe8:	d10e      	bne.n	8004008 <_malloc_r+0xcc>
 8003fea:	6032      	str	r2, [r6, #0]
 8003fec:	0028      	movs	r0, r5
 8003fee:	f000 f82d 	bl	800404c <__malloc_unlock>
 8003ff2:	0020      	movs	r0, r4
 8003ff4:	2207      	movs	r2, #7
 8003ff6:	300b      	adds	r0, #11
 8003ff8:	1d23      	adds	r3, r4, #4
 8003ffa:	4390      	bics	r0, r2
 8003ffc:	1ac2      	subs	r2, r0, r3
 8003ffe:	4298      	cmp	r0, r3
 8004000:	d0df      	beq.n	8003fc2 <_malloc_r+0x86>
 8004002:	1a1b      	subs	r3, r3, r0
 8004004:	50a3      	str	r3, [r4, r2]
 8004006:	e7dc      	b.n	8003fc2 <_malloc_r+0x86>
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	e7ef      	b.n	8003fec <_malloc_r+0xb0>
 800400c:	0023      	movs	r3, r4
 800400e:	6864      	ldr	r4, [r4, #4]
 8004010:	e7a6      	b.n	8003f60 <_malloc_r+0x24>
 8004012:	9c00      	ldr	r4, [sp, #0]
 8004014:	6863      	ldr	r3, [r4, #4]
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	e7ad      	b.n	8003f76 <_malloc_r+0x3a>
 800401a:	001a      	movs	r2, r3
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	42a3      	cmp	r3, r4
 8004020:	d1fb      	bne.n	800401a <_malloc_r+0xde>
 8004022:	2300      	movs	r3, #0
 8004024:	e7da      	b.n	8003fdc <_malloc_r+0xa0>
 8004026:	230c      	movs	r3, #12
 8004028:	0028      	movs	r0, r5
 800402a:	602b      	str	r3, [r5, #0]
 800402c:	f000 f80e 	bl	800404c <__malloc_unlock>
 8004030:	e7c6      	b.n	8003fc0 <_malloc_r+0x84>
 8004032:	6007      	str	r7, [r0, #0]
 8004034:	e7da      	b.n	8003fec <_malloc_r+0xb0>
 8004036:	46c0      	nop			@ (mov r8, r8)
 8004038:	200004c8 	.word	0x200004c8

0800403c <__malloc_lock>:
 800403c:	b510      	push	{r4, lr}
 800403e:	4802      	ldr	r0, [pc, #8]	@ (8004048 <__malloc_lock+0xc>)
 8004040:	f7ff ff04 	bl	8003e4c <__retarget_lock_acquire_recursive>
 8004044:	bd10      	pop	{r4, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	200004c0 	.word	0x200004c0

0800404c <__malloc_unlock>:
 800404c:	b510      	push	{r4, lr}
 800404e:	4802      	ldr	r0, [pc, #8]	@ (8004058 <__malloc_unlock+0xc>)
 8004050:	f7ff fefd 	bl	8003e4e <__retarget_lock_release_recursive>
 8004054:	bd10      	pop	{r4, pc}
 8004056:	46c0      	nop			@ (mov r8, r8)
 8004058:	200004c0 	.word	0x200004c0

0800405c <__ssputs_r>:
 800405c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800405e:	688e      	ldr	r6, [r1, #8]
 8004060:	b085      	sub	sp, #20
 8004062:	001f      	movs	r7, r3
 8004064:	000c      	movs	r4, r1
 8004066:	680b      	ldr	r3, [r1, #0]
 8004068:	9002      	str	r0, [sp, #8]
 800406a:	9203      	str	r2, [sp, #12]
 800406c:	42be      	cmp	r6, r7
 800406e:	d830      	bhi.n	80040d2 <__ssputs_r+0x76>
 8004070:	210c      	movs	r1, #12
 8004072:	5e62      	ldrsh	r2, [r4, r1]
 8004074:	2190      	movs	r1, #144	@ 0x90
 8004076:	00c9      	lsls	r1, r1, #3
 8004078:	420a      	tst	r2, r1
 800407a:	d028      	beq.n	80040ce <__ssputs_r+0x72>
 800407c:	2003      	movs	r0, #3
 800407e:	6921      	ldr	r1, [r4, #16]
 8004080:	1a5b      	subs	r3, r3, r1
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6963      	ldr	r3, [r4, #20]
 8004086:	4343      	muls	r3, r0
 8004088:	9801      	ldr	r0, [sp, #4]
 800408a:	0fdd      	lsrs	r5, r3, #31
 800408c:	18ed      	adds	r5, r5, r3
 800408e:	1c7b      	adds	r3, r7, #1
 8004090:	181b      	adds	r3, r3, r0
 8004092:	106d      	asrs	r5, r5, #1
 8004094:	42ab      	cmp	r3, r5
 8004096:	d900      	bls.n	800409a <__ssputs_r+0x3e>
 8004098:	001d      	movs	r5, r3
 800409a:	0552      	lsls	r2, r2, #21
 800409c:	d528      	bpl.n	80040f0 <__ssputs_r+0x94>
 800409e:	0029      	movs	r1, r5
 80040a0:	9802      	ldr	r0, [sp, #8]
 80040a2:	f7ff ff4b 	bl	8003f3c <_malloc_r>
 80040a6:	1e06      	subs	r6, r0, #0
 80040a8:	d02c      	beq.n	8004104 <__ssputs_r+0xa8>
 80040aa:	9a01      	ldr	r2, [sp, #4]
 80040ac:	6921      	ldr	r1, [r4, #16]
 80040ae:	f7ff fecf 	bl	8003e50 <memcpy>
 80040b2:	89a2      	ldrh	r2, [r4, #12]
 80040b4:	4b18      	ldr	r3, [pc, #96]	@ (8004118 <__ssputs_r+0xbc>)
 80040b6:	401a      	ands	r2, r3
 80040b8:	2380      	movs	r3, #128	@ 0x80
 80040ba:	4313      	orrs	r3, r2
 80040bc:	81a3      	strh	r3, [r4, #12]
 80040be:	9b01      	ldr	r3, [sp, #4]
 80040c0:	6126      	str	r6, [r4, #16]
 80040c2:	18f6      	adds	r6, r6, r3
 80040c4:	6026      	str	r6, [r4, #0]
 80040c6:	003e      	movs	r6, r7
 80040c8:	6165      	str	r5, [r4, #20]
 80040ca:	1aed      	subs	r5, r5, r3
 80040cc:	60a5      	str	r5, [r4, #8]
 80040ce:	42be      	cmp	r6, r7
 80040d0:	d900      	bls.n	80040d4 <__ssputs_r+0x78>
 80040d2:	003e      	movs	r6, r7
 80040d4:	0032      	movs	r2, r6
 80040d6:	9903      	ldr	r1, [sp, #12]
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	f7ff fe73 	bl	8003dc4 <memmove>
 80040de:	2000      	movs	r0, #0
 80040e0:	68a3      	ldr	r3, [r4, #8]
 80040e2:	1b9b      	subs	r3, r3, r6
 80040e4:	60a3      	str	r3, [r4, #8]
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	199b      	adds	r3, r3, r6
 80040ea:	6023      	str	r3, [r4, #0]
 80040ec:	b005      	add	sp, #20
 80040ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f0:	002a      	movs	r2, r5
 80040f2:	9802      	ldr	r0, [sp, #8]
 80040f4:	f000 faa9 	bl	800464a <_realloc_r>
 80040f8:	1e06      	subs	r6, r0, #0
 80040fa:	d1e0      	bne.n	80040be <__ssputs_r+0x62>
 80040fc:	6921      	ldr	r1, [r4, #16]
 80040fe:	9802      	ldr	r0, [sp, #8]
 8004100:	f7ff feb0 	bl	8003e64 <_free_r>
 8004104:	230c      	movs	r3, #12
 8004106:	2001      	movs	r0, #1
 8004108:	9a02      	ldr	r2, [sp, #8]
 800410a:	4240      	negs	r0, r0
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	89a2      	ldrh	r2, [r4, #12]
 8004110:	3334      	adds	r3, #52	@ 0x34
 8004112:	4313      	orrs	r3, r2
 8004114:	81a3      	strh	r3, [r4, #12]
 8004116:	e7e9      	b.n	80040ec <__ssputs_r+0x90>
 8004118:	fffffb7f 	.word	0xfffffb7f

0800411c <_svfiprintf_r>:
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411e:	b0a1      	sub	sp, #132	@ 0x84
 8004120:	9003      	str	r0, [sp, #12]
 8004122:	001d      	movs	r5, r3
 8004124:	898b      	ldrh	r3, [r1, #12]
 8004126:	000f      	movs	r7, r1
 8004128:	0016      	movs	r6, r2
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	d511      	bpl.n	8004152 <_svfiprintf_r+0x36>
 800412e:	690b      	ldr	r3, [r1, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10e      	bne.n	8004152 <_svfiprintf_r+0x36>
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	f7ff ff01 	bl	8003f3c <_malloc_r>
 800413a:	6038      	str	r0, [r7, #0]
 800413c:	6138      	str	r0, [r7, #16]
 800413e:	2800      	cmp	r0, #0
 8004140:	d105      	bne.n	800414e <_svfiprintf_r+0x32>
 8004142:	230c      	movs	r3, #12
 8004144:	9a03      	ldr	r2, [sp, #12]
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	2001      	movs	r0, #1
 800414a:	4240      	negs	r0, r0
 800414c:	e0cf      	b.n	80042ee <_svfiprintf_r+0x1d2>
 800414e:	2340      	movs	r3, #64	@ 0x40
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	ac08      	add	r4, sp, #32
 8004156:	6163      	str	r3, [r4, #20]
 8004158:	3320      	adds	r3, #32
 800415a:	7663      	strb	r3, [r4, #25]
 800415c:	3310      	adds	r3, #16
 800415e:	76a3      	strb	r3, [r4, #26]
 8004160:	9507      	str	r5, [sp, #28]
 8004162:	0035      	movs	r5, r6
 8004164:	782b      	ldrb	r3, [r5, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <_svfiprintf_r+0x52>
 800416a:	2b25      	cmp	r3, #37	@ 0x25
 800416c:	d148      	bne.n	8004200 <_svfiprintf_r+0xe4>
 800416e:	1bab      	subs	r3, r5, r6
 8004170:	9305      	str	r3, [sp, #20]
 8004172:	42b5      	cmp	r5, r6
 8004174:	d00b      	beq.n	800418e <_svfiprintf_r+0x72>
 8004176:	0032      	movs	r2, r6
 8004178:	0039      	movs	r1, r7
 800417a:	9803      	ldr	r0, [sp, #12]
 800417c:	f7ff ff6e 	bl	800405c <__ssputs_r>
 8004180:	3001      	adds	r0, #1
 8004182:	d100      	bne.n	8004186 <_svfiprintf_r+0x6a>
 8004184:	e0ae      	b.n	80042e4 <_svfiprintf_r+0x1c8>
 8004186:	6963      	ldr	r3, [r4, #20]
 8004188:	9a05      	ldr	r2, [sp, #20]
 800418a:	189b      	adds	r3, r3, r2
 800418c:	6163      	str	r3, [r4, #20]
 800418e:	782b      	ldrb	r3, [r5, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d100      	bne.n	8004196 <_svfiprintf_r+0x7a>
 8004194:	e0a6      	b.n	80042e4 <_svfiprintf_r+0x1c8>
 8004196:	2201      	movs	r2, #1
 8004198:	2300      	movs	r3, #0
 800419a:	4252      	negs	r2, r2
 800419c:	6062      	str	r2, [r4, #4]
 800419e:	a904      	add	r1, sp, #16
 80041a0:	3254      	adds	r2, #84	@ 0x54
 80041a2:	1852      	adds	r2, r2, r1
 80041a4:	1c6e      	adds	r6, r5, #1
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	60e3      	str	r3, [r4, #12]
 80041aa:	60a3      	str	r3, [r4, #8]
 80041ac:	7013      	strb	r3, [r2, #0]
 80041ae:	65a3      	str	r3, [r4, #88]	@ 0x58
 80041b0:	4b54      	ldr	r3, [pc, #336]	@ (8004304 <_svfiprintf_r+0x1e8>)
 80041b2:	2205      	movs	r2, #5
 80041b4:	0018      	movs	r0, r3
 80041b6:	7831      	ldrb	r1, [r6, #0]
 80041b8:	9305      	str	r3, [sp, #20]
 80041ba:	f000 fa3b 	bl	8004634 <memchr>
 80041be:	1c75      	adds	r5, r6, #1
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d11f      	bne.n	8004204 <_svfiprintf_r+0xe8>
 80041c4:	6822      	ldr	r2, [r4, #0]
 80041c6:	06d3      	lsls	r3, r2, #27
 80041c8:	d504      	bpl.n	80041d4 <_svfiprintf_r+0xb8>
 80041ca:	2353      	movs	r3, #83	@ 0x53
 80041cc:	a904      	add	r1, sp, #16
 80041ce:	185b      	adds	r3, r3, r1
 80041d0:	2120      	movs	r1, #32
 80041d2:	7019      	strb	r1, [r3, #0]
 80041d4:	0713      	lsls	r3, r2, #28
 80041d6:	d504      	bpl.n	80041e2 <_svfiprintf_r+0xc6>
 80041d8:	2353      	movs	r3, #83	@ 0x53
 80041da:	a904      	add	r1, sp, #16
 80041dc:	185b      	adds	r3, r3, r1
 80041de:	212b      	movs	r1, #43	@ 0x2b
 80041e0:	7019      	strb	r1, [r3, #0]
 80041e2:	7833      	ldrb	r3, [r6, #0]
 80041e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80041e6:	d016      	beq.n	8004216 <_svfiprintf_r+0xfa>
 80041e8:	0035      	movs	r5, r6
 80041ea:	2100      	movs	r1, #0
 80041ec:	200a      	movs	r0, #10
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	782a      	ldrb	r2, [r5, #0]
 80041f2:	1c6e      	adds	r6, r5, #1
 80041f4:	3a30      	subs	r2, #48	@ 0x30
 80041f6:	2a09      	cmp	r2, #9
 80041f8:	d950      	bls.n	800429c <_svfiprintf_r+0x180>
 80041fa:	2900      	cmp	r1, #0
 80041fc:	d111      	bne.n	8004222 <_svfiprintf_r+0x106>
 80041fe:	e017      	b.n	8004230 <_svfiprintf_r+0x114>
 8004200:	3501      	adds	r5, #1
 8004202:	e7af      	b.n	8004164 <_svfiprintf_r+0x48>
 8004204:	9b05      	ldr	r3, [sp, #20]
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	1ac0      	subs	r0, r0, r3
 800420a:	2301      	movs	r3, #1
 800420c:	4083      	lsls	r3, r0
 800420e:	4313      	orrs	r3, r2
 8004210:	002e      	movs	r6, r5
 8004212:	6023      	str	r3, [r4, #0]
 8004214:	e7cc      	b.n	80041b0 <_svfiprintf_r+0x94>
 8004216:	9b07      	ldr	r3, [sp, #28]
 8004218:	1d19      	adds	r1, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9107      	str	r1, [sp, #28]
 800421e:	2b00      	cmp	r3, #0
 8004220:	db01      	blt.n	8004226 <_svfiprintf_r+0x10a>
 8004222:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004224:	e004      	b.n	8004230 <_svfiprintf_r+0x114>
 8004226:	425b      	negs	r3, r3
 8004228:	60e3      	str	r3, [r4, #12]
 800422a:	2302      	movs	r3, #2
 800422c:	4313      	orrs	r3, r2
 800422e:	6023      	str	r3, [r4, #0]
 8004230:	782b      	ldrb	r3, [r5, #0]
 8004232:	2b2e      	cmp	r3, #46	@ 0x2e
 8004234:	d10c      	bne.n	8004250 <_svfiprintf_r+0x134>
 8004236:	786b      	ldrb	r3, [r5, #1]
 8004238:	2b2a      	cmp	r3, #42	@ 0x2a
 800423a:	d134      	bne.n	80042a6 <_svfiprintf_r+0x18a>
 800423c:	9b07      	ldr	r3, [sp, #28]
 800423e:	3502      	adds	r5, #2
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	9207      	str	r2, [sp, #28]
 8004246:	2b00      	cmp	r3, #0
 8004248:	da01      	bge.n	800424e <_svfiprintf_r+0x132>
 800424a:	2301      	movs	r3, #1
 800424c:	425b      	negs	r3, r3
 800424e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004250:	4e2d      	ldr	r6, [pc, #180]	@ (8004308 <_svfiprintf_r+0x1ec>)
 8004252:	2203      	movs	r2, #3
 8004254:	0030      	movs	r0, r6
 8004256:	7829      	ldrb	r1, [r5, #0]
 8004258:	f000 f9ec 	bl	8004634 <memchr>
 800425c:	2800      	cmp	r0, #0
 800425e:	d006      	beq.n	800426e <_svfiprintf_r+0x152>
 8004260:	2340      	movs	r3, #64	@ 0x40
 8004262:	1b80      	subs	r0, r0, r6
 8004264:	4083      	lsls	r3, r0
 8004266:	6822      	ldr	r2, [r4, #0]
 8004268:	3501      	adds	r5, #1
 800426a:	4313      	orrs	r3, r2
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	7829      	ldrb	r1, [r5, #0]
 8004270:	2206      	movs	r2, #6
 8004272:	4826      	ldr	r0, [pc, #152]	@ (800430c <_svfiprintf_r+0x1f0>)
 8004274:	1c6e      	adds	r6, r5, #1
 8004276:	7621      	strb	r1, [r4, #24]
 8004278:	f000 f9dc 	bl	8004634 <memchr>
 800427c:	2800      	cmp	r0, #0
 800427e:	d038      	beq.n	80042f2 <_svfiprintf_r+0x1d6>
 8004280:	4b23      	ldr	r3, [pc, #140]	@ (8004310 <_svfiprintf_r+0x1f4>)
 8004282:	2b00      	cmp	r3, #0
 8004284:	d122      	bne.n	80042cc <_svfiprintf_r+0x1b0>
 8004286:	2207      	movs	r2, #7
 8004288:	9b07      	ldr	r3, [sp, #28]
 800428a:	3307      	adds	r3, #7
 800428c:	4393      	bics	r3, r2
 800428e:	3308      	adds	r3, #8
 8004290:	9307      	str	r3, [sp, #28]
 8004292:	6963      	ldr	r3, [r4, #20]
 8004294:	9a04      	ldr	r2, [sp, #16]
 8004296:	189b      	adds	r3, r3, r2
 8004298:	6163      	str	r3, [r4, #20]
 800429a:	e762      	b.n	8004162 <_svfiprintf_r+0x46>
 800429c:	4343      	muls	r3, r0
 800429e:	0035      	movs	r5, r6
 80042a0:	2101      	movs	r1, #1
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	e7a4      	b.n	80041f0 <_svfiprintf_r+0xd4>
 80042a6:	2300      	movs	r3, #0
 80042a8:	200a      	movs	r0, #10
 80042aa:	0019      	movs	r1, r3
 80042ac:	3501      	adds	r5, #1
 80042ae:	6063      	str	r3, [r4, #4]
 80042b0:	782a      	ldrb	r2, [r5, #0]
 80042b2:	1c6e      	adds	r6, r5, #1
 80042b4:	3a30      	subs	r2, #48	@ 0x30
 80042b6:	2a09      	cmp	r2, #9
 80042b8:	d903      	bls.n	80042c2 <_svfiprintf_r+0x1a6>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c8      	beq.n	8004250 <_svfiprintf_r+0x134>
 80042be:	9109      	str	r1, [sp, #36]	@ 0x24
 80042c0:	e7c6      	b.n	8004250 <_svfiprintf_r+0x134>
 80042c2:	4341      	muls	r1, r0
 80042c4:	0035      	movs	r5, r6
 80042c6:	2301      	movs	r3, #1
 80042c8:	1889      	adds	r1, r1, r2
 80042ca:	e7f1      	b.n	80042b0 <_svfiprintf_r+0x194>
 80042cc:	aa07      	add	r2, sp, #28
 80042ce:	9200      	str	r2, [sp, #0]
 80042d0:	0021      	movs	r1, r4
 80042d2:	003a      	movs	r2, r7
 80042d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <_svfiprintf_r+0x1f8>)
 80042d6:	9803      	ldr	r0, [sp, #12]
 80042d8:	e000      	b.n	80042dc <_svfiprintf_r+0x1c0>
 80042da:	bf00      	nop
 80042dc:	9004      	str	r0, [sp, #16]
 80042de:	9b04      	ldr	r3, [sp, #16]
 80042e0:	3301      	adds	r3, #1
 80042e2:	d1d6      	bne.n	8004292 <_svfiprintf_r+0x176>
 80042e4:	89bb      	ldrh	r3, [r7, #12]
 80042e6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80042e8:	065b      	lsls	r3, r3, #25
 80042ea:	d500      	bpl.n	80042ee <_svfiprintf_r+0x1d2>
 80042ec:	e72c      	b.n	8004148 <_svfiprintf_r+0x2c>
 80042ee:	b021      	add	sp, #132	@ 0x84
 80042f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f2:	aa07      	add	r2, sp, #28
 80042f4:	9200      	str	r2, [sp, #0]
 80042f6:	0021      	movs	r1, r4
 80042f8:	003a      	movs	r2, r7
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <_svfiprintf_r+0x1f8>)
 80042fc:	9803      	ldr	r0, [sp, #12]
 80042fe:	f000 f87b 	bl	80043f8 <_printf_i>
 8004302:	e7eb      	b.n	80042dc <_svfiprintf_r+0x1c0>
 8004304:	08004e8c 	.word	0x08004e8c
 8004308:	08004e92 	.word	0x08004e92
 800430c:	08004e96 	.word	0x08004e96
 8004310:	00000000 	.word	0x00000000
 8004314:	0800405d 	.word	0x0800405d

08004318 <_printf_common>:
 8004318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800431a:	0016      	movs	r6, r2
 800431c:	9301      	str	r3, [sp, #4]
 800431e:	688a      	ldr	r2, [r1, #8]
 8004320:	690b      	ldr	r3, [r1, #16]
 8004322:	000c      	movs	r4, r1
 8004324:	9000      	str	r0, [sp, #0]
 8004326:	4293      	cmp	r3, r2
 8004328:	da00      	bge.n	800432c <_printf_common+0x14>
 800432a:	0013      	movs	r3, r2
 800432c:	0022      	movs	r2, r4
 800432e:	6033      	str	r3, [r6, #0]
 8004330:	3243      	adds	r2, #67	@ 0x43
 8004332:	7812      	ldrb	r2, [r2, #0]
 8004334:	2a00      	cmp	r2, #0
 8004336:	d001      	beq.n	800433c <_printf_common+0x24>
 8004338:	3301      	adds	r3, #1
 800433a:	6033      	str	r3, [r6, #0]
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	069b      	lsls	r3, r3, #26
 8004340:	d502      	bpl.n	8004348 <_printf_common+0x30>
 8004342:	6833      	ldr	r3, [r6, #0]
 8004344:	3302      	adds	r3, #2
 8004346:	6033      	str	r3, [r6, #0]
 8004348:	6822      	ldr	r2, [r4, #0]
 800434a:	2306      	movs	r3, #6
 800434c:	0015      	movs	r5, r2
 800434e:	401d      	ands	r5, r3
 8004350:	421a      	tst	r2, r3
 8004352:	d027      	beq.n	80043a4 <_printf_common+0x8c>
 8004354:	0023      	movs	r3, r4
 8004356:	3343      	adds	r3, #67	@ 0x43
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	1e5a      	subs	r2, r3, #1
 800435c:	4193      	sbcs	r3, r2
 800435e:	6822      	ldr	r2, [r4, #0]
 8004360:	0692      	lsls	r2, r2, #26
 8004362:	d430      	bmi.n	80043c6 <_printf_common+0xae>
 8004364:	0022      	movs	r2, r4
 8004366:	9901      	ldr	r1, [sp, #4]
 8004368:	9800      	ldr	r0, [sp, #0]
 800436a:	9d08      	ldr	r5, [sp, #32]
 800436c:	3243      	adds	r2, #67	@ 0x43
 800436e:	47a8      	blx	r5
 8004370:	3001      	adds	r0, #1
 8004372:	d025      	beq.n	80043c0 <_printf_common+0xa8>
 8004374:	2206      	movs	r2, #6
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	2500      	movs	r5, #0
 800437a:	4013      	ands	r3, r2
 800437c:	2b04      	cmp	r3, #4
 800437e:	d105      	bne.n	800438c <_printf_common+0x74>
 8004380:	6833      	ldr	r3, [r6, #0]
 8004382:	68e5      	ldr	r5, [r4, #12]
 8004384:	1aed      	subs	r5, r5, r3
 8004386:	43eb      	mvns	r3, r5
 8004388:	17db      	asrs	r3, r3, #31
 800438a:	401d      	ands	r5, r3
 800438c:	68a3      	ldr	r3, [r4, #8]
 800438e:	6922      	ldr	r2, [r4, #16]
 8004390:	4293      	cmp	r3, r2
 8004392:	dd01      	ble.n	8004398 <_printf_common+0x80>
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	18ed      	adds	r5, r5, r3
 8004398:	2600      	movs	r6, #0
 800439a:	42b5      	cmp	r5, r6
 800439c:	d120      	bne.n	80043e0 <_printf_common+0xc8>
 800439e:	2000      	movs	r0, #0
 80043a0:	e010      	b.n	80043c4 <_printf_common+0xac>
 80043a2:	3501      	adds	r5, #1
 80043a4:	68e3      	ldr	r3, [r4, #12]
 80043a6:	6832      	ldr	r2, [r6, #0]
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	42ab      	cmp	r3, r5
 80043ac:	ddd2      	ble.n	8004354 <_printf_common+0x3c>
 80043ae:	0022      	movs	r2, r4
 80043b0:	2301      	movs	r3, #1
 80043b2:	9901      	ldr	r1, [sp, #4]
 80043b4:	9800      	ldr	r0, [sp, #0]
 80043b6:	9f08      	ldr	r7, [sp, #32]
 80043b8:	3219      	adds	r2, #25
 80043ba:	47b8      	blx	r7
 80043bc:	3001      	adds	r0, #1
 80043be:	d1f0      	bne.n	80043a2 <_printf_common+0x8a>
 80043c0:	2001      	movs	r0, #1
 80043c2:	4240      	negs	r0, r0
 80043c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043c6:	2030      	movs	r0, #48	@ 0x30
 80043c8:	18e1      	adds	r1, r4, r3
 80043ca:	3143      	adds	r1, #67	@ 0x43
 80043cc:	7008      	strb	r0, [r1, #0]
 80043ce:	0021      	movs	r1, r4
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	3145      	adds	r1, #69	@ 0x45
 80043d4:	7809      	ldrb	r1, [r1, #0]
 80043d6:	18a2      	adds	r2, r4, r2
 80043d8:	3243      	adds	r2, #67	@ 0x43
 80043da:	3302      	adds	r3, #2
 80043dc:	7011      	strb	r1, [r2, #0]
 80043de:	e7c1      	b.n	8004364 <_printf_common+0x4c>
 80043e0:	0022      	movs	r2, r4
 80043e2:	2301      	movs	r3, #1
 80043e4:	9901      	ldr	r1, [sp, #4]
 80043e6:	9800      	ldr	r0, [sp, #0]
 80043e8:	9f08      	ldr	r7, [sp, #32]
 80043ea:	321a      	adds	r2, #26
 80043ec:	47b8      	blx	r7
 80043ee:	3001      	adds	r0, #1
 80043f0:	d0e6      	beq.n	80043c0 <_printf_common+0xa8>
 80043f2:	3601      	adds	r6, #1
 80043f4:	e7d1      	b.n	800439a <_printf_common+0x82>
	...

080043f8 <_printf_i>:
 80043f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fa:	b08b      	sub	sp, #44	@ 0x2c
 80043fc:	9206      	str	r2, [sp, #24]
 80043fe:	000a      	movs	r2, r1
 8004400:	3243      	adds	r2, #67	@ 0x43
 8004402:	9307      	str	r3, [sp, #28]
 8004404:	9005      	str	r0, [sp, #20]
 8004406:	9203      	str	r2, [sp, #12]
 8004408:	7e0a      	ldrb	r2, [r1, #24]
 800440a:	000c      	movs	r4, r1
 800440c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800440e:	2a78      	cmp	r2, #120	@ 0x78
 8004410:	d809      	bhi.n	8004426 <_printf_i+0x2e>
 8004412:	2a62      	cmp	r2, #98	@ 0x62
 8004414:	d80b      	bhi.n	800442e <_printf_i+0x36>
 8004416:	2a00      	cmp	r2, #0
 8004418:	d100      	bne.n	800441c <_printf_i+0x24>
 800441a:	e0ba      	b.n	8004592 <_printf_i+0x19a>
 800441c:	497a      	ldr	r1, [pc, #488]	@ (8004608 <_printf_i+0x210>)
 800441e:	9104      	str	r1, [sp, #16]
 8004420:	2a58      	cmp	r2, #88	@ 0x58
 8004422:	d100      	bne.n	8004426 <_printf_i+0x2e>
 8004424:	e08e      	b.n	8004544 <_printf_i+0x14c>
 8004426:	0025      	movs	r5, r4
 8004428:	3542      	adds	r5, #66	@ 0x42
 800442a:	702a      	strb	r2, [r5, #0]
 800442c:	e022      	b.n	8004474 <_printf_i+0x7c>
 800442e:	0010      	movs	r0, r2
 8004430:	3863      	subs	r0, #99	@ 0x63
 8004432:	2815      	cmp	r0, #21
 8004434:	d8f7      	bhi.n	8004426 <_printf_i+0x2e>
 8004436:	f7fb fe67 	bl	8000108 <__gnu_thumb1_case_shi>
 800443a:	0016      	.short	0x0016
 800443c:	fff6001f 	.word	0xfff6001f
 8004440:	fff6fff6 	.word	0xfff6fff6
 8004444:	001ffff6 	.word	0x001ffff6
 8004448:	fff6fff6 	.word	0xfff6fff6
 800444c:	fff6fff6 	.word	0xfff6fff6
 8004450:	0036009f 	.word	0x0036009f
 8004454:	fff6007e 	.word	0xfff6007e
 8004458:	00b0fff6 	.word	0x00b0fff6
 800445c:	0036fff6 	.word	0x0036fff6
 8004460:	fff6fff6 	.word	0xfff6fff6
 8004464:	0082      	.short	0x0082
 8004466:	0025      	movs	r5, r4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	3542      	adds	r5, #66	@ 0x42
 800446c:	1d11      	adds	r1, r2, #4
 800446e:	6019      	str	r1, [r3, #0]
 8004470:	6813      	ldr	r3, [r2, #0]
 8004472:	702b      	strb	r3, [r5, #0]
 8004474:	2301      	movs	r3, #1
 8004476:	e09e      	b.n	80045b6 <_printf_i+0x1be>
 8004478:	6818      	ldr	r0, [r3, #0]
 800447a:	6809      	ldr	r1, [r1, #0]
 800447c:	1d02      	adds	r2, r0, #4
 800447e:	060d      	lsls	r5, r1, #24
 8004480:	d50b      	bpl.n	800449a <_printf_i+0xa2>
 8004482:	6806      	ldr	r6, [r0, #0]
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	2e00      	cmp	r6, #0
 8004488:	da03      	bge.n	8004492 <_printf_i+0x9a>
 800448a:	232d      	movs	r3, #45	@ 0x2d
 800448c:	9a03      	ldr	r2, [sp, #12]
 800448e:	4276      	negs	r6, r6
 8004490:	7013      	strb	r3, [r2, #0]
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <_printf_i+0x210>)
 8004494:	270a      	movs	r7, #10
 8004496:	9304      	str	r3, [sp, #16]
 8004498:	e018      	b.n	80044cc <_printf_i+0xd4>
 800449a:	6806      	ldr	r6, [r0, #0]
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	0649      	lsls	r1, r1, #25
 80044a0:	d5f1      	bpl.n	8004486 <_printf_i+0x8e>
 80044a2:	b236      	sxth	r6, r6
 80044a4:	e7ef      	b.n	8004486 <_printf_i+0x8e>
 80044a6:	6808      	ldr	r0, [r1, #0]
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	c940      	ldmia	r1!, {r6}
 80044ac:	0605      	lsls	r5, r0, #24
 80044ae:	d402      	bmi.n	80044b6 <_printf_i+0xbe>
 80044b0:	0640      	lsls	r0, r0, #25
 80044b2:	d500      	bpl.n	80044b6 <_printf_i+0xbe>
 80044b4:	b2b6      	uxth	r6, r6
 80044b6:	6019      	str	r1, [r3, #0]
 80044b8:	4b53      	ldr	r3, [pc, #332]	@ (8004608 <_printf_i+0x210>)
 80044ba:	270a      	movs	r7, #10
 80044bc:	9304      	str	r3, [sp, #16]
 80044be:	2a6f      	cmp	r2, #111	@ 0x6f
 80044c0:	d100      	bne.n	80044c4 <_printf_i+0xcc>
 80044c2:	3f02      	subs	r7, #2
 80044c4:	0023      	movs	r3, r4
 80044c6:	2200      	movs	r2, #0
 80044c8:	3343      	adds	r3, #67	@ 0x43
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	60a3      	str	r3, [r4, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	db06      	blt.n	80044e2 <_printf_i+0xea>
 80044d4:	2104      	movs	r1, #4
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	9d03      	ldr	r5, [sp, #12]
 80044da:	438a      	bics	r2, r1
 80044dc:	6022      	str	r2, [r4, #0]
 80044de:	4333      	orrs	r3, r6
 80044e0:	d00c      	beq.n	80044fc <_printf_i+0x104>
 80044e2:	9d03      	ldr	r5, [sp, #12]
 80044e4:	0030      	movs	r0, r6
 80044e6:	0039      	movs	r1, r7
 80044e8:	f7fb fe9e 	bl	8000228 <__aeabi_uidivmod>
 80044ec:	9b04      	ldr	r3, [sp, #16]
 80044ee:	3d01      	subs	r5, #1
 80044f0:	5c5b      	ldrb	r3, [r3, r1]
 80044f2:	702b      	strb	r3, [r5, #0]
 80044f4:	0033      	movs	r3, r6
 80044f6:	0006      	movs	r6, r0
 80044f8:	429f      	cmp	r7, r3
 80044fa:	d9f3      	bls.n	80044e4 <_printf_i+0xec>
 80044fc:	2f08      	cmp	r7, #8
 80044fe:	d109      	bne.n	8004514 <_printf_i+0x11c>
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	07db      	lsls	r3, r3, #31
 8004504:	d506      	bpl.n	8004514 <_printf_i+0x11c>
 8004506:	6862      	ldr	r2, [r4, #4]
 8004508:	6923      	ldr	r3, [r4, #16]
 800450a:	429a      	cmp	r2, r3
 800450c:	dc02      	bgt.n	8004514 <_printf_i+0x11c>
 800450e:	2330      	movs	r3, #48	@ 0x30
 8004510:	3d01      	subs	r5, #1
 8004512:	702b      	strb	r3, [r5, #0]
 8004514:	9b03      	ldr	r3, [sp, #12]
 8004516:	1b5b      	subs	r3, r3, r5
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	9b07      	ldr	r3, [sp, #28]
 800451c:	0021      	movs	r1, r4
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	9805      	ldr	r0, [sp, #20]
 8004522:	9b06      	ldr	r3, [sp, #24]
 8004524:	aa09      	add	r2, sp, #36	@ 0x24
 8004526:	f7ff fef7 	bl	8004318 <_printf_common>
 800452a:	3001      	adds	r0, #1
 800452c:	d148      	bne.n	80045c0 <_printf_i+0x1c8>
 800452e:	2001      	movs	r0, #1
 8004530:	4240      	negs	r0, r0
 8004532:	b00b      	add	sp, #44	@ 0x2c
 8004534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004536:	2220      	movs	r2, #32
 8004538:	6809      	ldr	r1, [r1, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	6022      	str	r2, [r4, #0]
 800453e:	2278      	movs	r2, #120	@ 0x78
 8004540:	4932      	ldr	r1, [pc, #200]	@ (800460c <_printf_i+0x214>)
 8004542:	9104      	str	r1, [sp, #16]
 8004544:	0021      	movs	r1, r4
 8004546:	3145      	adds	r1, #69	@ 0x45
 8004548:	700a      	strb	r2, [r1, #0]
 800454a:	6819      	ldr	r1, [r3, #0]
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	c940      	ldmia	r1!, {r6}
 8004550:	0610      	lsls	r0, r2, #24
 8004552:	d402      	bmi.n	800455a <_printf_i+0x162>
 8004554:	0650      	lsls	r0, r2, #25
 8004556:	d500      	bpl.n	800455a <_printf_i+0x162>
 8004558:	b2b6      	uxth	r6, r6
 800455a:	6019      	str	r1, [r3, #0]
 800455c:	07d3      	lsls	r3, r2, #31
 800455e:	d502      	bpl.n	8004566 <_printf_i+0x16e>
 8004560:	2320      	movs	r3, #32
 8004562:	4313      	orrs	r3, r2
 8004564:	6023      	str	r3, [r4, #0]
 8004566:	2e00      	cmp	r6, #0
 8004568:	d001      	beq.n	800456e <_printf_i+0x176>
 800456a:	2710      	movs	r7, #16
 800456c:	e7aa      	b.n	80044c4 <_printf_i+0xcc>
 800456e:	2220      	movs	r2, #32
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	4393      	bics	r3, r2
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	e7f8      	b.n	800456a <_printf_i+0x172>
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	680d      	ldr	r5, [r1, #0]
 800457c:	1d10      	adds	r0, r2, #4
 800457e:	6949      	ldr	r1, [r1, #20]
 8004580:	6018      	str	r0, [r3, #0]
 8004582:	6813      	ldr	r3, [r2, #0]
 8004584:	062e      	lsls	r6, r5, #24
 8004586:	d501      	bpl.n	800458c <_printf_i+0x194>
 8004588:	6019      	str	r1, [r3, #0]
 800458a:	e002      	b.n	8004592 <_printf_i+0x19a>
 800458c:	066d      	lsls	r5, r5, #25
 800458e:	d5fb      	bpl.n	8004588 <_printf_i+0x190>
 8004590:	8019      	strh	r1, [r3, #0]
 8004592:	2300      	movs	r3, #0
 8004594:	9d03      	ldr	r5, [sp, #12]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	e7bf      	b.n	800451a <_printf_i+0x122>
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	1d11      	adds	r1, r2, #4
 800459e:	6019      	str	r1, [r3, #0]
 80045a0:	6815      	ldr	r5, [r2, #0]
 80045a2:	2100      	movs	r1, #0
 80045a4:	0028      	movs	r0, r5
 80045a6:	6862      	ldr	r2, [r4, #4]
 80045a8:	f000 f844 	bl	8004634 <memchr>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d001      	beq.n	80045b4 <_printf_i+0x1bc>
 80045b0:	1b40      	subs	r0, r0, r5
 80045b2:	6060      	str	r0, [r4, #4]
 80045b4:	6863      	ldr	r3, [r4, #4]
 80045b6:	6123      	str	r3, [r4, #16]
 80045b8:	2300      	movs	r3, #0
 80045ba:	9a03      	ldr	r2, [sp, #12]
 80045bc:	7013      	strb	r3, [r2, #0]
 80045be:	e7ac      	b.n	800451a <_printf_i+0x122>
 80045c0:	002a      	movs	r2, r5
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	9906      	ldr	r1, [sp, #24]
 80045c6:	9805      	ldr	r0, [sp, #20]
 80045c8:	9d07      	ldr	r5, [sp, #28]
 80045ca:	47a8      	blx	r5
 80045cc:	3001      	adds	r0, #1
 80045ce:	d0ae      	beq.n	800452e <_printf_i+0x136>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	079b      	lsls	r3, r3, #30
 80045d4:	d415      	bmi.n	8004602 <_printf_i+0x20a>
 80045d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80045d8:	68e0      	ldr	r0, [r4, #12]
 80045da:	4298      	cmp	r0, r3
 80045dc:	daa9      	bge.n	8004532 <_printf_i+0x13a>
 80045de:	0018      	movs	r0, r3
 80045e0:	e7a7      	b.n	8004532 <_printf_i+0x13a>
 80045e2:	0022      	movs	r2, r4
 80045e4:	2301      	movs	r3, #1
 80045e6:	9906      	ldr	r1, [sp, #24]
 80045e8:	9805      	ldr	r0, [sp, #20]
 80045ea:	9e07      	ldr	r6, [sp, #28]
 80045ec:	3219      	adds	r2, #25
 80045ee:	47b0      	blx	r6
 80045f0:	3001      	adds	r0, #1
 80045f2:	d09c      	beq.n	800452e <_printf_i+0x136>
 80045f4:	3501      	adds	r5, #1
 80045f6:	68e3      	ldr	r3, [r4, #12]
 80045f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	42ab      	cmp	r3, r5
 80045fe:	dcf0      	bgt.n	80045e2 <_printf_i+0x1ea>
 8004600:	e7e9      	b.n	80045d6 <_printf_i+0x1de>
 8004602:	2500      	movs	r5, #0
 8004604:	e7f7      	b.n	80045f6 <_printf_i+0x1fe>
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	08004e9d 	.word	0x08004e9d
 800460c:	08004eae 	.word	0x08004eae

08004610 <_sbrk_r>:
 8004610:	2300      	movs	r3, #0
 8004612:	b570      	push	{r4, r5, r6, lr}
 8004614:	4d06      	ldr	r5, [pc, #24]	@ (8004630 <_sbrk_r+0x20>)
 8004616:	0004      	movs	r4, r0
 8004618:	0008      	movs	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fba0 	bl	8000d60 <_sbrk>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d103      	bne.n	800462c <_sbrk_r+0x1c>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d000      	beq.n	800462c <_sbrk_r+0x1c>
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	46c0      	nop			@ (mov r8, r8)
 8004630:	200004bc 	.word	0x200004bc

08004634 <memchr>:
 8004634:	b2c9      	uxtb	r1, r1
 8004636:	1882      	adds	r2, r0, r2
 8004638:	4290      	cmp	r0, r2
 800463a:	d101      	bne.n	8004640 <memchr+0xc>
 800463c:	2000      	movs	r0, #0
 800463e:	4770      	bx	lr
 8004640:	7803      	ldrb	r3, [r0, #0]
 8004642:	428b      	cmp	r3, r1
 8004644:	d0fb      	beq.n	800463e <memchr+0xa>
 8004646:	3001      	adds	r0, #1
 8004648:	e7f6      	b.n	8004638 <memchr+0x4>

0800464a <_realloc_r>:
 800464a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800464c:	0006      	movs	r6, r0
 800464e:	000c      	movs	r4, r1
 8004650:	0015      	movs	r5, r2
 8004652:	2900      	cmp	r1, #0
 8004654:	d105      	bne.n	8004662 <_realloc_r+0x18>
 8004656:	0011      	movs	r1, r2
 8004658:	f7ff fc70 	bl	8003f3c <_malloc_r>
 800465c:	0004      	movs	r4, r0
 800465e:	0020      	movs	r0, r4
 8004660:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004662:	2a00      	cmp	r2, #0
 8004664:	d103      	bne.n	800466e <_realloc_r+0x24>
 8004666:	f7ff fbfd 	bl	8003e64 <_free_r>
 800466a:	002c      	movs	r4, r5
 800466c:	e7f7      	b.n	800465e <_realloc_r+0x14>
 800466e:	f000 f81c 	bl	80046aa <_malloc_usable_size_r>
 8004672:	0007      	movs	r7, r0
 8004674:	4285      	cmp	r5, r0
 8004676:	d802      	bhi.n	800467e <_realloc_r+0x34>
 8004678:	0843      	lsrs	r3, r0, #1
 800467a:	42ab      	cmp	r3, r5
 800467c:	d3ef      	bcc.n	800465e <_realloc_r+0x14>
 800467e:	0029      	movs	r1, r5
 8004680:	0030      	movs	r0, r6
 8004682:	f7ff fc5b 	bl	8003f3c <_malloc_r>
 8004686:	9001      	str	r0, [sp, #4]
 8004688:	2800      	cmp	r0, #0
 800468a:	d101      	bne.n	8004690 <_realloc_r+0x46>
 800468c:	9c01      	ldr	r4, [sp, #4]
 800468e:	e7e6      	b.n	800465e <_realloc_r+0x14>
 8004690:	002a      	movs	r2, r5
 8004692:	42bd      	cmp	r5, r7
 8004694:	d900      	bls.n	8004698 <_realloc_r+0x4e>
 8004696:	003a      	movs	r2, r7
 8004698:	0021      	movs	r1, r4
 800469a:	9801      	ldr	r0, [sp, #4]
 800469c:	f7ff fbd8 	bl	8003e50 <memcpy>
 80046a0:	0021      	movs	r1, r4
 80046a2:	0030      	movs	r0, r6
 80046a4:	f7ff fbde 	bl	8003e64 <_free_r>
 80046a8:	e7f0      	b.n	800468c <_realloc_r+0x42>

080046aa <_malloc_usable_size_r>:
 80046aa:	1f0b      	subs	r3, r1, #4
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	1f18      	subs	r0, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	da01      	bge.n	80046b8 <_malloc_usable_size_r+0xe>
 80046b4:	580b      	ldr	r3, [r1, r0]
 80046b6:	18c0      	adds	r0, r0, r3
 80046b8:	4770      	bx	lr
	...

080046bc <_init>:
 80046bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046be:	46c0      	nop			@ (mov r8, r8)
 80046c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046c2:	bc08      	pop	{r3}
 80046c4:	469e      	mov	lr, r3
 80046c6:	4770      	bx	lr

080046c8 <_fini>:
 80046c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ce:	bc08      	pop	{r3}
 80046d0:	469e      	mov	lr, r3
 80046d2:	4770      	bx	lr
